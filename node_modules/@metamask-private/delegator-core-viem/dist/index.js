"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _createStarExport(obj) { Object.keys(obj) .filter((key) => key !== "default" && key !== "__esModule") .forEach((key) => { if (exports.hasOwnProperty(key)) { return; } Object.defineProperty(exports, key, {enumerable: true, configurable: true, get: () => obj[key]}); }); } function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } }var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// src/index.ts
var _delegationutils = require('@metamask-private/delegation-utils'); _createStarExport(_delegationutils);

// src/toMetaMaskSmartAccount.ts




var _accountabstraction = require('viem/account-abstraction');









// src/signatory.ts


var _viem = require('viem');





var EOA_STUB_SIGNATURE = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
var resolveSignatory = (config) => {
  const { implementation } = config;
  if (implementation === _delegationutils.Implementation.Hybrid) {
    return resolveHybridSignatory(config.signatory);
  } else if (implementation === _delegationutils.Implementation.MultiSig) {
    return resolveMultiSigSignatory(
      config.signatory
    );
  } else {
    throw new Error(`Implementation type '${implementation}' not supported`);
  }
};
var resolveSignatoryFromWalletConfig = (config) => {
  return {
    signMessage: config.walletClient.signMessage,
    signTypedData: (typedData) => {
      return config.walletClient.signTypedData(typedData);
    },
    getStubSignature: async () => EOA_STUB_SIGNATURE
  };
};
var resolveSignatoryFromAccountConfig = (config) => {
  return {
    signMessage: config.account.signMessage,
    signTypedData: config.account.signTypedData,
    getStubSignature: async () => EOA_STUB_SIGNATURE
  };
};
var resolveHybridSignatory = (config) => {
  if ("walletClient" in config) {
    return resolveSignatoryFromWalletConfig(config);
  } else if ("account" in config) {
    const { signMessage, signTypedData, getStubSignature } = resolveSignatoryFromAccountConfig(config);
    if (!signMessage) {
      throw new Error("Account does not support signMessage");
    }
    if (!signTypedData) {
      throw new Error("Account does not support signTypedData");
    }
    return {
      signMessage,
      signTypedData,
      getStubSignature
    };
  } else {
    const { keyId, webAuthnAccount } = config;
    if (webAuthnAccount.type !== "webAuthn") {
      throw new Error("Account is not a webAuthn account");
    }
    const encodeSignature = ({ signature, webauthn }) => _delegationutils.encodeDeleGatorSignature.call(void 0, 
      keyId,
      signature,
      webauthn.clientDataJSON,
      webauthn.authenticatorData
    );
    const signMessage = async (args) => webAuthnAccount.signMessage(args).then(encodeSignature);
    const signTypedData = async (typedDataDefinition) => webAuthnAccount.signTypedData(typedDataDefinition).then(encodeSignature);
    const getStubSignature = async () => _delegationutils.createDummyWebAuthnSignature.call(void 0, keyId);
    return {
      signMessage,
      signTypedData,
      getStubSignature
    };
  }
};
var resolveMultiSigSignatory = (config) => {
  const resolvedSignatories = config.map((signatory) => {
    let individualSignMessage;
    let individualSignTypedData;
    let address;
    if ("walletClient" in signatory) {
      const { signMessage: signMessage2, signTypedData: signTypedData2 } = resolveSignatoryFromWalletConfig(signatory);
      individualSignMessage = signMessage2;
      individualSignTypedData = signTypedData2;
      address = signatory.walletClient.account.address;
    } else {
      const { signMessage: signMessage2, signTypedData: signTypedData2 } = resolveSignatoryFromAccountConfig(signatory);
      if (!signMessage2) {
        throw new Error("Account does not support signMessage");
      }
      if (!signTypedData2) {
        throw new Error("Account does not support signTypedData");
      }
      individualSignMessage = signMessage2;
      individualSignTypedData = signTypedData2;
      address = signatory.account.address;
    }
    return {
      address,
      individualSignMessage,
      individualSignTypedData
    };
  });
  const aggregateSignatures = (signaturesWithAddress) => {
    signaturesWithAddress.sort((a, b) => a.address.localeCompare(b.address));
    return _viem.concat.call(void 0, signaturesWithAddress.map(({ signature }) => signature));
  };
  const signMessage = async (args) => {
    const addressAndSignatures = resolvedSignatories.map(
      async ({ individualSignMessage, address }) => ({
        signature: await individualSignMessage(args),
        address
      })
    );
    const signatures = await Promise.all(addressAndSignatures);
    return aggregateSignatures(signatures);
  };
  const signTypedData = async (typedDataDefinition) => {
    const addressAndSignatures = resolvedSignatories.map(
      async ({ individualSignTypedData, address }) => ({
        signature: await individualSignTypedData(typedDataDefinition),
        address
      })
    );
    const signatures = await Promise.all(addressAndSignatures);
    return aggregateSignatures(signatures);
  };
  const getStubSignature = async () => _viem.concat.call(void 0, resolvedSignatories.map(() => EOA_STUB_SIGNATURE));
  return {
    signMessage,
    signTypedData,
    getStubSignature
  };
};

// src/counterfactualAccountData.ts





// src/DelegationFramework/HybridDeleGator/encode.ts
var encode_exports = {};
__export(encode_exports, {
  addKey: () => encode,
  initializeHybridDeleGator: () => encode2,
  reinitializeHybridDeleGator: () => encode3,
  removeKey: () => encode4,
  updateSigners: () => encode5
});

// src/DelegationFramework/HybridDeleGator/methods/addKey.ts

var _delegationabis = require('@metamask-private/delegation-abis');
var _actions = require('viem/actions');
var simulate = (client, hybridDeleGatorAddress, p256Owner) => {
  return _actions.simulateContract.call(void 0, client, {
    address: hybridDeleGatorAddress,
    abi: _delegationabis.HybridDeleGator.abi,
    functionName: "addKey",
    args: [p256Owner.keyId, p256Owner.x, p256Owner.y]
  });
};
var encode = (p256Owner) => {
  return _viem.encodeFunctionData.call(void 0, {
    abi: _delegationabis.HybridDeleGator.abi,
    functionName: "addKey",
    args: [p256Owner.keyId, p256Owner.x, p256Owner.y]
  });
};

// src/DelegationFramework/HybridDeleGator/methods/initialize.ts



var simulate2 = (client, hybridDeleGatorAddress, eoaOwner, p256Owners) => {
  return _actions.simulateContract.call(void 0, client, {
    address: hybridDeleGatorAddress,
    abi: _delegationabis.HybridDeleGator.abi,
    functionName: "initialize",
    args: [
      eoaOwner,
      p256Owners.map((p256Owner) => p256Owner.keyId),
      p256Owners.map((p256Owner) => p256Owner.x),
      p256Owners.map((p256Owner) => p256Owner.y)
    ]
  });
};
var encode2 = (eoaOwner, p256Owners) => {
  return _viem.encodeFunctionData.call(void 0, {
    abi: _delegationabis.HybridDeleGator.abi,
    functionName: "initialize",
    args: [
      eoaOwner,
      p256Owners.map((p256Owner) => p256Owner.keyId),
      p256Owners.map((p256Owner) => p256Owner.x),
      p256Owners.map((p256Owner) => p256Owner.y)
    ]
  });
};

// src/DelegationFramework/HybridDeleGator/methods/reinitialize.ts



var simulate3 = (client, hybridDeleGatorAddress, version, eoaOwner, p256Owners, removeExistingP256Owners) => {
  return _actions.simulateContract.call(void 0, client, {
    address: hybridDeleGatorAddress,
    abi: _delegationabis.HybridDeleGator.abi,
    functionName: "reinitialize",
    args: [
      version,
      eoaOwner,
      p256Owners.map((p256Owner) => p256Owner.keyId),
      p256Owners.map((p256Owner) => p256Owner.x),
      p256Owners.map((p256Owner) => p256Owner.y),
      removeExistingP256Owners
    ]
  });
};
var encode3 = (version, eoaOwner, p256Owners, removeExistingP256Owners) => {
  return _viem.encodeFunctionData.call(void 0, {
    abi: _delegationabis.HybridDeleGator.abi,
    functionName: "reinitialize",
    args: [
      version,
      eoaOwner,
      p256Owners.map((p256Owner) => p256Owner.keyId),
      p256Owners.map((p256Owner) => p256Owner.x),
      p256Owners.map((p256Owner) => p256Owner.y),
      removeExistingP256Owners
    ]
  });
};

// src/DelegationFramework/HybridDeleGator/methods/removeKey.ts



var simulate4 = (client, hybridDeleGatorAddress, keyId) => {
  return _actions.simulateContract.call(void 0, client, {
    address: hybridDeleGatorAddress,
    abi: _delegationabis.HybridDeleGator.abi,
    functionName: "removeKey",
    args: [keyId]
  });
};
var encode4 = (keyId) => {
  return _viem.encodeFunctionData.call(void 0, {
    abi: _delegationabis.HybridDeleGator.abi,
    functionName: "removeKey",
    args: [keyId]
  });
};

// src/DelegationFramework/HybridDeleGator/methods/updateSigners.ts



var simulate5 = (client, hybridDeleGatorAddress, eoaOwner, p256Owners) => {
  return _actions.simulateContract.call(void 0, client, {
    address: hybridDeleGatorAddress,
    abi: _delegationabis.HybridDeleGator.abi,
    functionName: "updateSigners",
    args: [
      eoaOwner,
      p256Owners.map((p256Owner) => p256Owner.keyId),
      p256Owners.map((p256Owner) => p256Owner.x),
      p256Owners.map((p256Owner) => p256Owner.y)
    ]
  });
};
var encode5 = (eoaOwner, p256Owners) => {
  return _viem.encodeFunctionData.call(void 0, {
    abi: _delegationabis.HybridDeleGator.abi,
    functionName: "updateSigners",
    args: [
      eoaOwner,
      p256Owners.map((p256Owner) => p256Owner.keyId),
      p256Owners.map((p256Owner) => p256Owner.x),
      p256Owners.map((p256Owner) => p256Owner.y)
    ]
  });
};

// src/DelegationFramework/MultiSigDeleGator/encode.ts
var encode_exports2 = {};
__export(encode_exports2, {
  addSigner: () => encode6,
  initializeMultiSigDeleGator: () => encode7,
  reinitializeMultiSigDeleGator: () => encode8,
  removeSigner: () => encode9,
  replaceSigner: () => encode10,
  updateMultiSigParameters: () => encode12,
  updateThreshold: () => encode11
});

// src/DelegationFramework/MultiSigDeleGator/methods/addSigner.ts



var simulate6 = (client, multiSigDeleGatorAddress, signer) => {
  return _actions.simulateContract.call(void 0, client, {
    address: multiSigDeleGatorAddress,
    abi: _delegationabis.MultiSigDeleGator.abi,
    functionName: "addSigner",
    args: [signer]
  });
};
var encode6 = (signer) => {
  return _viem.encodeFunctionData.call(void 0, {
    abi: _delegationabis.MultiSigDeleGator.abi,
    functionName: "addSigner",
    args: [signer]
  });
};

// src/DelegationFramework/MultiSigDeleGator/methods/initialize.ts



var simulate7 = (client, multiSigDeleGatorAddress, owners, threshold) => {
  return _actions.simulateContract.call(void 0, client, {
    address: multiSigDeleGatorAddress,
    abi: _delegationabis.MultiSigDeleGator.abi,
    functionName: "initialize",
    args: [owners, threshold]
  });
};
var encode7 = (owners, threshold) => {
  return _viem.encodeFunctionData.call(void 0, {
    abi: _delegationabis.MultiSigDeleGator.abi,
    functionName: "initialize",
    args: [owners, threshold]
  });
};

// src/DelegationFramework/MultiSigDeleGator/methods/reinitialize.ts



var simulate8 = (client, multiSigDeleGatorAddress, version, owners, threshold, removeExistingOwners) => {
  return _actions.simulateContract.call(void 0, client, {
    address: multiSigDeleGatorAddress,
    abi: _delegationabis.MultiSigDeleGator.abi,
    functionName: "reinitialize",
    args: [version, owners, threshold, removeExistingOwners]
  });
};
var encode8 = (version, owners, threshold, removeExistingOwners) => {
  return _viem.encodeFunctionData.call(void 0, {
    abi: _delegationabis.MultiSigDeleGator.abi,
    functionName: "reinitialize",
    args: [version, owners, threshold, removeExistingOwners]
  });
};

// src/DelegationFramework/MultiSigDeleGator/methods/removeSigner.ts



var simulate9 = (client, multiSigDeleGatorAddress, signer) => {
  return _actions.simulateContract.call(void 0, client, {
    address: multiSigDeleGatorAddress,
    abi: _delegationabis.MultiSigDeleGator.abi,
    functionName: "removeSigner",
    args: [signer]
  });
};
var encode9 = (signer) => {
  return _viem.encodeFunctionData.call(void 0, {
    abi: _delegationabis.MultiSigDeleGator.abi,
    functionName: "removeSigner",
    args: [signer]
  });
};

// src/DelegationFramework/MultiSigDeleGator/methods/replaceSigner.ts



var simulate10 = (client, multiSigDeleGatorAddress, oldSigner, newSigner) => {
  return _actions.simulateContract.call(void 0, client, {
    address: multiSigDeleGatorAddress,
    abi: _delegationabis.MultiSigDeleGator.abi,
    functionName: "replaceSigner",
    args: [oldSigner, newSigner]
  });
};
var encode10 = (oldSigner, newSigner) => {
  return _viem.encodeFunctionData.call(void 0, {
    abi: _delegationabis.MultiSigDeleGator.abi,
    functionName: "replaceSigner",
    args: [oldSigner, newSigner]
  });
};

// src/DelegationFramework/MultiSigDeleGator/methods/updateThreshold.ts



var simulate11 = (client, multiSigDeleGatorAddress, threshold) => {
  return _actions.simulateContract.call(void 0, client, {
    address: multiSigDeleGatorAddress,
    abi: _delegationabis.MultiSigDeleGator.abi,
    functionName: "updateThreshold",
    args: [threshold]
  });
};
var encode11 = (threshold) => {
  return _viem.encodeFunctionData.call(void 0, {
    abi: _delegationabis.MultiSigDeleGator.abi,
    functionName: "updateThreshold",
    args: [threshold]
  });
};

// src/DelegationFramework/MultiSigDeleGator/methods/updateMultiSigParameters.ts



var simulate12 = (client, multiSigDeleGatorAddress, owners, threshold, removeExistingOwners) => {
  return _actions.simulateContract.call(void 0, client, {
    address: multiSigDeleGatorAddress,
    abi: _delegationabis.MultiSigDeleGator.abi,
    functionName: "updateMultiSigParameters",
    args: [owners, threshold, removeExistingOwners]
  });
};
var encode12 = (owners, threshold, removeExistingOwners) => {
  return _viem.encodeFunctionData.call(void 0, {
    abi: _delegationabis.MultiSigDeleGator.abi,
    functionName: "updateMultiSigParameters",
    args: [owners, threshold, removeExistingOwners]
  });
};

// src/DelegationFramework/SimpleFactory/encode.ts
var encode_exports3 = {};
__export(encode_exports3, {
  create2Deploy: () => encode13
});

// src/DelegationFramework/SimpleFactory/methods/create2Deploy.ts



var simulate13 = (client, factoryAddress, creationCode, salt) => {
  return _actions.simulateContract.call(void 0, client, {
    address: factoryAddress,
    abi: _delegationabis.SimpleFactory.abi,
    functionName: "deploy",
    args: [creationCode, salt]
  });
};
var encode13 = (creationCode, salt) => {
  return _viem.encodeFunctionData.call(void 0, {
    abi: _delegationabis.SimpleFactory.abi,
    functionName: "deploy",
    args: [creationCode, salt]
  });
};
var execute = async (client, factoryAddress, creationCode, salt) => {
  const { request } = await simulate13(
    client,
    factoryAddress,
    creationCode,
    salt
  );
  return _actions.writeContract.call(void 0, client, request);
};

// src/DelegationFramework/utils.ts
var utils_exports = {};
__export(utils_exports, {
  encodeProxyCreationCode: () => encodeProxyCreationCode,
  isContractDeployed: () => isContractDeployed,
  isImplementationExpected: () => isImplementationExpected
});



// src/DelegationFramework/DeleGatorCore/methods/getDelegationManager.ts



// src/DelegationFramework/DeleGatorCore/methods/getDeposit.ts



// src/DelegationFramework/DeleGatorCore/methods/getEntryPoint.ts



// src/DelegationFramework/DeleGatorCore/methods/getNonce.ts



// src/DelegationFramework/DeleGatorCore/methods/getProxyImplementation.ts


var read = async (client, contractAddress) => await _actions.readContract.call(void 0, client, {
  address: contractAddress,
  abi: _delegationabis.DeleGatorCore.abi,
  functionName: "getImplementation"
});

// src/DelegationFramework/DeleGatorCore/methods/getProxyVersion.ts



// src/DelegationFramework/utils.ts

async function isContractDeployed(client, contractAddress) {
  const code = await _actions.getCode.call(void 0, client, {
    address: contractAddress
  });
  return !!code && code !== "0x";
}
async function isImplementationExpected(client, contractAddress, expectedImplementationAddress) {
  if (!await isContractDeployed(client, contractAddress))
    return false;
  const implementationAddress = await read(
    client,
    contractAddress
  );
  return implementationAddress === expectedImplementationAddress;
}
var encodeProxyCreationCode = (implementationAddress, initcode) => _viem.encodeDeployData.call(void 0, {
  abi: _delegationutils.ERC1967Proxy.abi,
  args: [implementationAddress, initcode],
  bytecode: _delegationutils.ERC1967Proxy.bytecode
});

// src/counterfactualAccountData.ts
var getCounterfactualAccountData = async (factory, implementations, implementation, deployParams, deploySalt) => {
  let implementationAddress, initcode;
  switch (implementation) {
    case _delegationutils.Implementation.Hybrid:
      const [owner, keyIds, xValues, yValues] = deployParams;
      implementationAddress = implementations.HybridDeleGatorImpl;
      const p256Owners = keyIds.map((keyId, index) => ({
        keyId,
        x: xValues[index],
        y: yValues[index]
      }));
      initcode = encode2(owner, p256Owners);
      break;
    case _delegationutils.Implementation.MultiSig:
      const [owners, threshold] = deployParams;
      implementationAddress = implementations.MultiSigDeleGatorImpl;
      initcode = encode7(owners, threshold);
      break;
    default:
      throw new Error(`Implementation type '${implementation}' not supported`);
  }
  const salt = _viem.pad.call(void 0, deploySalt, { dir: "left", size: 32 });
  const proxyCreationCode = encodeProxyCreationCode(
    implementationAddress,
    initcode
  );
  const address = _viem.getContractAddress.call(void 0, {
    bytecode: proxyCreationCode,
    from: factory,
    opcode: "CREATE2",
    salt
  });
  const factoryData = encode13(proxyCreationCode, salt);
  return {
    factoryData,
    address
  };
};

// src/encodeCalls.ts


// src/DelegationFramework/DeleGatorCore/encode.ts
var encode_exports4 = {};
__export(encode_exports4, {
  disableDelegation: () => encode14,
  enableDelegation: () => encode15,
  execute: () => encode16,
  executeWithMode: () => encode17,
  upgradeToAndCall: () => encode18
});

// src/DelegationFramework/DeleGatorCore/methods/disableDelegation.ts



var simulate14 = (client, contractAddress, delegation) => {
  const abi = _delegationabis.DeleGatorCore.abi;
  return _actions.simulateContract.call(void 0, client, {
    address: contractAddress,
    abi,
    functionName: "disableDelegation",
    args: [delegation]
  });
};
var encode14 = (delegation) => {
  return _viem.encodeFunctionData.call(void 0, {
    abi: _delegationabis.DeleGatorCore.abi,
    functionName: "disableDelegation",
    args: [delegation]
  });
};

// src/DelegationFramework/DeleGatorCore/methods/enableDelegation.ts



var simulate15 = (client, contractAddress, delegation) => {
  const abi = _delegationabis.DeleGatorCore.abi;
  return _actions.simulateContract.call(void 0, client, {
    address: contractAddress,
    abi,
    functionName: "enableDelegation",
    args: [delegation]
  });
};
var encode15 = (delegation) => {
  return _viem.encodeFunctionData.call(void 0, {
    abi: _delegationabis.DeleGatorCore.abi,
    functionName: "enableDelegation",
    args: [delegation]
  });
};

// src/DelegationFramework/DeleGatorCore/methods/execute.ts



var simulate16 = (client, contractAddress, execution) => {
  return _actions.simulateContract.call(void 0, client, {
    address: contractAddress,
    abi: _delegationabis.DeleGatorCore.abi,
    functionName: "execute",
    args: [execution]
  });
};
var encode16 = (execution) => {
  return _viem.encodeFunctionData.call(void 0, {
    abi: _delegationabis.DeleGatorCore.abi,
    functionName: "execute",
    args: [execution]
  });
};

// src/DelegationFramework/DeleGatorCore/methods/executeWithMode.ts






var simulate17 = (client, contractAddress, mode, executions) => {
  return _actions.simulateContract.call(void 0, client, {
    address: contractAddress,
    abi: _delegationabis.DeleGatorCore.abi,
    functionName: "execute",
    args: [mode, _delegationutils.encodeExecutionCalldata.call(void 0, executions)]
  });
};
var encode17 = (mode, executions) => {
  return _viem.encodeFunctionData.call(void 0, {
    abi: _delegationabis.DeleGatorCore.abi,
    functionName: "execute",
    args: [mode, _delegationutils.encodeExecutionCalldata.call(void 0, executions)]
  });
};

// src/DelegationFramework/DeleGatorCore/methods/upgradeToAndCall.ts



var simulate18 = (client, contractAddress, implementation, data) => {
  return _actions.simulateContract.call(void 0, client, {
    address: contractAddress,
    abi: _delegationabis.DeleGatorCore.abi,
    functionName: "upgradeToAndCall",
    args: [implementation, data]
  });
};
var encode18 = (implementation, data) => {
  return _viem.encodeFunctionData.call(void 0, {
    abi: _delegationabis.DeleGatorCore.abi,
    functionName: "upgradeToAndCall",
    args: [implementation, data]
  });
};

// src/encodeCalls.ts
var encodeCallsForCaller = async (caller, calls) => {
  if (calls.length === 1) {
    const call = calls[0];
    if (call.to === caller) {
      return call.data || "0x";
    }
  }
  return encodeCalls(calls);
};
var encodeCalls = (calls) => {
  if (calls.length === 1) {
    const call = calls[0];
    const execution = _delegationutils.createExecution.call(void 0, call.to, call.value, call.data);
    return encode16(execution);
  }
  const executions = calls.map(
    ({ to, value, data }) => _delegationutils.createExecution.call(void 0, to, value, data)
  );
  return encode17(_delegationutils.BATCH_DEFAULT_MODE, executions);
};

// src/DelegationFramework/EntryPoint/read.ts
var read_exports = {};
__export(read_exports, {
  getNonce: () => read7
});

// src/DelegationFramework/EntryPoint/methods/getNonce.ts


var read7 = async (client, entryPoint, contractAddress, key) => await _actions.readContract.call(void 0, client, {
  address: entryPoint,
  abi: _delegationabis.EntryPoint.abi,
  functionName: "getNonce",
  args: [contractAddress, key]
});

// src/toMetaMaskSmartAccount.ts
var ENTRYPOINT_VERSION = "0.7";
async function toMetaMaskSmartAccount(params) {
  const {
    client,
    client: { chain },
    implementation
  } = params;
  if (!chain) {
    throw new Error("Chain not specified");
  }
  const signatory = resolveSignatory({
    implementation,
    signatory: params.signatory
  });
  const environment = _nullishCoalesce(params.environment, () => ( _delegationutils.getDeleGatorEnvironment.call(void 0, chain.id)));
  const implementationContractName = implementation === _delegationutils.Implementation.Hybrid ? "HybridDeleGator" : "MultiSigDeleGator";
  let address, factoryData;
  if (params.address) {
    factoryData = void 0;
    address = params.address;
  } else {
    const accountData = await getCounterfactualAccountData(
      environment.SimpleFactory,
      environment.implementations,
      implementation,
      params.deployParams,
      params.deploySalt
    );
    address = accountData.address;
    factoryData = accountData.factoryData;
  }
  const entryPoint = {
    abi: _accountabstraction.entryPoint07Abi,
    address: environment.EntryPoint,
    version: ENTRYPOINT_VERSION
  };
  const getFactoryArgs = async () => {
    if (factoryData === void 0) {
      throw new Error(
        "Deploy params were not provided, so factory args cannot be inferred"
      );
    }
    return {
      factoryData,
      factory: environment.SimpleFactory
    };
  };
  const signDelegation = (params2) => {
    const { delegation, chainId } = params2;
    const signature = signatory.signTypedData({
      domain: {
        chainId: chainId || chain.id,
        name: "DelegationManager",
        version: "1",
        verifyingContract: environment.DelegationManager
      },
      types: _delegationutils.SIGNABLE_DELEGATION_TYPED_DATA,
      primaryType: "Delegation",
      message: delegation
    });
    return signature;
  };
  const signUserOperation = async (params2) => {
    const { chainId } = params2;
    const packedUserOp = _accountabstraction.toPackedUserOperation.call(void 0, {
      sender: address,
      ...params2
    });
    const signature = await signatory.signTypedData({
      domain: {
        chainId: chainId || chain.id,
        name: implementationContractName,
        version: "1",
        verifyingContract: address
      },
      types: _delegationutils.SIGNABLE_USER_OP_TYPED_DATA,
      primaryType: "PackedUserOperation",
      message: packedUserOp
    });
    return signature;
  };
  const delegatorAbi = implementation === _delegationutils.Implementation.Hybrid ? _delegationutils.HybridDeleGator.abi : _delegationutils.MultiSigDeleGator.abi;
  const getAddress = async () => address;
  const getNonce = () => read7(client, environment.EntryPoint, address, 0n);
  const encodeCalls2 = async (calls) => encodeCallsForCaller(address, calls);
  return _accountabstraction.toSmartAccount.call(void 0, {
    abi: delegatorAbi,
    client,
    entryPoint,
    environment,
    getAddress,
    getFactoryArgs,
    encodeCalls: encodeCalls2,
    getNonce,
    signUserOperation,
    signDelegation,
    ...signatory
  });
}

// src/DelegationFramework/DelegationManager/encode.ts
var encode_exports5 = {};
__export(encode_exports5, {
  disableDelegation: () => encode19,
  enableDelegation: () => encode20,
  redeemDelegations: () => encode21
});

// src/DelegationFramework/DelegationManager/methods/disableDelegation.ts



var simulate19 = (client, contractAddress, delegation) => {
  const abi = _delegationabis.DelegationManager.abi;
  return _actions.simulateContract.call(void 0, client, {
    address: contractAddress,
    abi,
    functionName: "disableDelegation",
    args: [delegation]
  });
};
var execute2 = async (client, contractAddress, delegation) => {
  const { request } = await simulate19(client, contractAddress, delegation);
  return _actions.writeContract.call(void 0, client, request);
};
var encode19 = (delegation) => {
  return _viem.encodeFunctionData.call(void 0, {
    abi: _delegationabis.DelegationManager.abi,
    functionName: "disableDelegation",
    args: [delegation]
  });
};

// src/DelegationFramework/DelegationManager/methods/enableDelegation.ts



var simulate20 = (client, contractAddress, delegation) => {
  const abi = _delegationabis.DelegationManager.abi;
  return _actions.simulateContract.call(void 0, client, {
    address: contractAddress,
    abi,
    functionName: "enableDelegation",
    args: [delegation]
  });
};
var execute3 = async (client, contractAddress, delegation) => {
  const { request } = await simulate20(client, contractAddress, delegation);
  return _actions.writeContract.call(void 0, client, request);
};
var encode20 = (delegation) => {
  return _viem.encodeFunctionData.call(void 0, {
    abi: _delegationabis.DelegationManager.abi,
    functionName: "enableDelegation",
    args: [delegation]
  });
};

// src/DelegationFramework/DelegationManager/methods/redeemDelegations.ts







var simulate21 = (client, contractAddress, delegations, modes, executions) => {
  return _actions.simulateContract.call(void 0, client, {
    address: contractAddress,
    abi: _delegationabis.DelegationManager.abi,
    functionName: "redeemDelegations",
    args: [
      _delegationutils.encodePermissionContexts.call(void 0, delegations),
      modes,
      _delegationutils.encodeExecutionCalldatas.call(void 0, executions)
    ]
  });
};
var execute4 = async (client, contractAddress, delegations, modes, executions) => {
  const { request } = await simulate21(
    client,
    contractAddress,
    delegations,
    modes,
    executions
  );
  return _actions.writeContract.call(void 0, client, request);
};
var encode21 = (delegations, modes, executions) => {
  return _viem.encodeFunctionData.call(void 0, {
    abi: _delegationabis.DelegationManager.abi,
    functionName: "redeemDelegations",
    args: [
      _delegationutils.encodePermissionContexts.call(void 0, delegations),
      modes,
      _delegationutils.encodeExecutionCalldatas.call(void 0, executions)
    ]
  });
};

// src/DelegationFramework/DelegationManager/execute.ts
var execute_exports = {};
__export(execute_exports, {
  disableDelegation: () => execute2,
  enableDelegation: () => execute3,
  redeemDelegations: () => execute4
});

// src/DelegationFramework/DelegationManager/read.ts
var read_exports2 = {};
__export(read_exports2, {
  getAnyDelegate: () => read8,
  getRootAuthority: () => read9
});

// src/DelegationFramework/DelegationManager/methods/getAnyDelegate.ts


var read8 = async (client, contractAddress) => await _actions.readContract.call(void 0, client, {
  address: contractAddress,
  abi: _delegationabis.DelegationManager.abi,
  functionName: "ANY_DELEGATE"
});

// src/DelegationFramework/DelegationManager/methods/getRootAuthority.ts


var read9 = async (client, contractAddress) => await _actions.readContract.call(void 0, client, {
  address: contractAddress,
  abi: _delegationabis.DelegationManager.abi,
  functionName: "ROOT_AUTHORITY"
});

// src/DelegationFramework/DelegationManager/simulate.ts
var simulate_exports = {};
__export(simulate_exports, {
  disableDelegation: () => simulate19,
  enableDelegation: () => simulate20,
  redeemDelegations: () => simulate21
});

// src/DelegationFramework/DelegationManager/constants.ts
var constants_exports = {};
__export(constants_exports, {
  ANY_DELEGATE: () => ANY_DELEGATE,
  DOMAIN_VERSION: () => DOMAIN_VERSION,
  NAME: () => NAME,
  ROOT_AUTHORITY: () => ROOT_AUTHORITY,
  VERSION: () => VERSION
});
var NAME = "DelegationManager";
var VERSION = "1.2.0";
var DOMAIN_VERSION = "1";
var ROOT_AUTHORITY = "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff";
var ANY_DELEGATE = "0x0000000000000000000000000000000000000a11";

// src/DelegationFramework/DeleGatorCore/simulate.ts
var simulate_exports2 = {};
__export(simulate_exports2, {
  disableDelegation: () => simulate14,
  enableDelegation: () => simulate15,
  execute: () => simulate16,
  executeWithMode: () => simulate17,
  upgradeToAndCall: () => simulate18
});

// src/DelegationFramework/EIP712/read.ts
var read_exports4 = {};
__export(read_exports4, {
  getContractName: () => read10,
  getContractVersion: () => read11,
  getDomainVersion: () => read12
});

// src/DelegationFramework/EIP712/methods/getContractName.ts

var read10 = async (client, contractAddress) => await _actions.readContract.call(void 0, client, {
  address: contractAddress,
  abi: [
    {
      type: "function",
      name: "NAME",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "string",
          internalType: "string"
        }
      ],
      stateMutability: "view"
    }
  ],
  functionName: "NAME"
});

// src/DelegationFramework/EIP712/methods/getContractVersion.ts

var read11 = async (client, contractAddress) => await _actions.readContract.call(void 0, client, {
  address: contractAddress,
  abi: [
    {
      type: "function",
      name: "VERSION",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "string",
          internalType: "string"
        }
      ],
      stateMutability: "view"
    }
  ],
  functionName: "VERSION"
});

// src/DelegationFramework/EIP712/methods/getDomainVersion.ts

var read12 = async (client, contractAddress) => await _actions.readContract.call(void 0, client, {
  address: contractAddress,
  abi: [
    {
      type: "function",
      name: "DOMAIN_VERSION",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "string",
          internalType: "string"
        }
      ],
      stateMutability: "view"
    }
  ],
  functionName: "DOMAIN_VERSION"
});

// src/DelegationFramework/HybridDeleGator/read.ts
var read_exports5 = {};
__export(read_exports5, {
  getKey: () => read13,
  getKeyIdHashes: () => read14,
  getKeyIdHashesCount: () => read15
});

// src/DelegationFramework/HybridDeleGator/methods/getKey.ts


var read13 = async (client, hybridDeleGatorAddress, keyId) => await _actions.readContract.call(void 0, client, {
  address: hybridDeleGatorAddress,
  abi: _delegationabis.HybridDeleGator.abi,
  functionName: "getKey",
  args: [keyId]
});

// src/DelegationFramework/HybridDeleGator/methods/getKeyIdHashes.ts


var read14 = async (client, hybridDeleGatorAddress) => await _actions.readContract.call(void 0, client, {
  address: hybridDeleGatorAddress,
  abi: _delegationabis.HybridDeleGator.abi,
  functionName: "getKeyIdHashes"
});

// src/DelegationFramework/HybridDeleGator/methods/getKeyIdHashesCount.ts


var read15 = async (client, hybridDeleGatorAddress) => await _actions.readContract.call(void 0, client, {
  address: hybridDeleGatorAddress,
  abi: _delegationabis.HybridDeleGator.abi,
  functionName: "getKeyIdHashesCount"
});

// src/DelegationFramework/HybridDeleGator/simulate.ts
var simulate_exports3 = {};
__export(simulate_exports3, {
  addKey: () => simulate,
  initializeHybridDeleGator: () => simulate2,
  reinitializeHybridDeleGator: () => simulate3,
  removeKey: () => simulate4,
  updateSigners: () => simulate5
});

// src/DelegationFramework/HybridDeleGator/constants.ts
var constants_exports2 = {};
__export(constants_exports2, {
  ANY_DELEGATE: () => ANY_DELEGATE2,
  DOMAIN_VERSION: () => DOMAIN_VERSION2,
  NAME: () => NAME2,
  ROOT_AUTHORITY: () => ROOT_AUTHORITY2,
  VERSION: () => VERSION2
});
var NAME2 = "HybridDeleGator";
var VERSION2 = "1.2.0";
var DOMAIN_VERSION2 = "1";
var ROOT_AUTHORITY2 = "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff";
var ANY_DELEGATE2 = "0x0000000000000000000000000000000000000a11";

// src/DelegationFramework/MultiSigDeleGator/read.ts
var read_exports6 = {};
__export(read_exports6, {
  getMaxNumberOfSigners: () => read20,
  getSigners: () => read16,
  getSignersCount: () => read17,
  getThreshold: () => read18,
  isSigner: () => read19
});

// src/DelegationFramework/MultiSigDeleGator/methods/getSigners.ts


var read16 = async (client, multiSigDeleGatorAddress) => await _actions.readContract.call(void 0, client, {
  address: multiSigDeleGatorAddress,
  abi: _delegationabis.MultiSigDeleGator.abi,
  functionName: "getSigners"
});

// src/DelegationFramework/MultiSigDeleGator/methods/getSignersCount.ts


var read17 = async (client, multiSigDeleGatorAddress) => await _actions.readContract.call(void 0, client, {
  address: multiSigDeleGatorAddress,
  abi: _delegationabis.MultiSigDeleGator.abi,
  functionName: "getSignersCount"
});

// src/DelegationFramework/MultiSigDeleGator/methods/getThreshold.ts


var read18 = async (client, multiSigDeleGatorAddress) => await _actions.readContract.call(void 0, client, {
  address: multiSigDeleGatorAddress,
  abi: _delegationabis.MultiSigDeleGator.abi,
  functionName: "getThreshold"
});

// src/DelegationFramework/MultiSigDeleGator/methods/isSigner.ts


var read19 = async (client, multiSigDeleGatorAddress, signer) => await _actions.readContract.call(void 0, client, {
  address: multiSigDeleGatorAddress,
  abi: _delegationabis.MultiSigDeleGator.abi,
  functionName: "isSigner",
  args: [signer]
});

// src/DelegationFramework/MultiSigDeleGator/methods/getMaxNumberOfSigners.ts


var read20 = async (client, multiSigDeleGatorAddress) => await _actions.readContract.call(void 0, client, {
  address: multiSigDeleGatorAddress,
  abi: _delegationabis.MultiSigDeleGator.abi,
  functionName: "MAX_NUMBER_OF_SIGNERS"
});

// src/DelegationFramework/MultiSigDeleGator/simulate.ts
var simulate_exports4 = {};
__export(simulate_exports4, {
  addSigner: () => simulate6,
  initializeMultiSigDeleGator: () => simulate7,
  reinitializeMultiSigDeleGator: () => simulate8,
  removeSigner: () => simulate9,
  replaceSigner: () => simulate10,
  updateMultiSigParameters: () => simulate12,
  updateThreshold: () => simulate11
});

// src/DelegationFramework/MultiSigDeleGator/constants.ts
var constants_exports3 = {};
__export(constants_exports3, {
  MAX_NUMBER_OF_SIGNERS: () => MAX_NUMBER_OF_SIGNERS
});
var MAX_NUMBER_OF_SIGNERS = 30;

// src/DelegationFramework/Ownable2Step/read.ts
var read_exports7 = {};
__export(read_exports7, {
  getOwner: () => read22,
  getPendingOwner: () => read21
});

// src/DelegationFramework/Ownable2Step/methods/getPendingOwner.ts


var read21 = async (client, contractAddress) => await _actions.readContract.call(void 0, client, {
  address: contractAddress,
  abi: _delegationabis.Ownable2Step.abi,
  functionName: "pendingOwner"
});

// src/DelegationFramework/Ownable2Step/methods/getOwner.ts


var read22 = async (client, contractAddress) => await _actions.readContract.call(void 0, client, {
  address: contractAddress,
  abi: _delegationabis.Ownable2Step.abi,
  functionName: "owner"
});

// src/DelegationFramework/Ownable2Step/execute.ts
var execute_exports2 = {};
__export(execute_exports2, {
  acceptOwnership: () => execute7,
  renounceOwnership: () => execute6,
  transferOwnership: () => execute5
});

// src/DelegationFramework/Ownable2Step/methods/transferOwnership.ts



var simulate22 = (client, contractAddress, account) => {
  return _actions.simulateContract.call(void 0, client, {
    address: contractAddress,
    abi: _delegationabis.Ownable2Step.abi,
    functionName: "transferOwnership",
    args: [account]
  });
};
var execute5 = async (client, contractAddress, account) => {
  const { request } = await simulate22(client, contractAddress, account);
  return _actions.writeContract.call(void 0, client, request);
};
var encode22 = (account) => {
  return _viem.encodeFunctionData.call(void 0, {
    abi: _delegationabis.Ownable2Step.abi,
    functionName: "transferOwnership",
    args: [account]
  });
};

// src/DelegationFramework/Ownable2Step/methods/renounceOwnership.ts



var simulate23 = (client, contractAddress) => {
  return _actions.simulateContract.call(void 0, client, {
    address: contractAddress,
    abi: _delegationabis.Ownable2Step.abi,
    functionName: "renounceOwnership"
  });
};
var execute6 = async (client, contractAddress) => {
  const { request } = await simulate23(client, contractAddress);
  return _actions.writeContract.call(void 0, client, request);
};
var encode23 = () => {
  return _viem.encodeFunctionData.call(void 0, {
    abi: _delegationabis.Ownable2Step.abi,
    functionName: "renounceOwnership"
  });
};

// src/DelegationFramework/Ownable2Step/methods/acceptOwnership.ts



var simulate24 = (client, contractAddress) => {
  return _actions.simulateContract.call(void 0, client, {
    address: contractAddress,
    abi: _delegationabis.Ownable2Step.abi,
    functionName: "acceptOwnership"
  });
};
var execute7 = async (client, contractAddress) => {
  const { request } = await simulate24(client, contractAddress);
  return _actions.writeContract.call(void 0, client, request);
};
var encode24 = () => {
  return _viem.encodeFunctionData.call(void 0, {
    abi: _delegationabis.Ownable2Step.abi,
    functionName: "acceptOwnership"
  });
};

// src/DelegationFramework/Ownable2Step/encode.ts
var encode_exports6 = {};
__export(encode_exports6, {
  acceptOwnership: () => encode24,
  renounceOwnership: () => encode23,
  transferOwnership: () => encode22
});

// src/DelegationFramework/Ownable2Step/simulate.ts
var simulate_exports5 = {};
__export(simulate_exports5, {
  acceptOwnership: () => simulate24,
  renounceOwnership: () => simulate23,
  transferOwnership: () => simulate22
});

// src/DelegationFramework/Pausable/read.ts
var read_exports8 = {};
__export(read_exports8, {
  isPaused: () => read23
});

// src/DelegationFramework/Pausable/methods/isPaused.ts


var read23 = async (client, contractAddress) => await _actions.readContract.call(void 0, client, {
  address: contractAddress,
  abi: _delegationabis.Pausable.abi,
  functionName: "paused"
});

// src/DelegationFramework/Pausable/execute.ts
var execute_exports3 = {};
__export(execute_exports3, {
  pause: () => execute8,
  unpause: () => execute9
});

// src/DelegationFramework/Pausable/methods/pause.ts


var PauseAbi = [
  {
    type: "function",
    name: "pause",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  }
];
var simulate25 = (client, contractAddress) => {
  return _actions.simulateContract.call(void 0, client, {
    address: contractAddress,
    abi: PauseAbi,
    functionName: "pause"
  });
};
var execute8 = async (client, contractAddress) => {
  const { request } = await simulate25(client, contractAddress);
  return _actions.writeContract.call(void 0, client, request);
};
var encode25 = () => {
  return _viem.encodeFunctionData.call(void 0, {
    abi: PauseAbi,
    functionName: "pause"
  });
};

// src/DelegationFramework/Pausable/methods/unpause.ts


var UnpauseAbi = [
  {
    type: "function",
    name: "unpause",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  }
];
var simulate26 = (client, contractAddress) => {
  return _actions.simulateContract.call(void 0, client, {
    address: contractAddress,
    abi: UnpauseAbi,
    functionName: "unpause"
  });
};
var execute9 = async (client, contractAddress) => {
  const { request } = await simulate26(client, contractAddress);
  return _actions.writeContract.call(void 0, client, request);
};
var encode26 = () => {
  return _viem.encodeFunctionData.call(void 0, {
    abi: UnpauseAbi,
    functionName: "unpause"
  });
};

// src/DelegationFramework/Pausable/encode.ts
var encode_exports7 = {};
__export(encode_exports7, {
  pause: () => encode25,
  unpause: () => encode26
});

// src/DelegationFramework/Pausable/simulate.ts
var simulate_exports6 = {};
__export(simulate_exports6, {
  pause: () => simulate25,
  unpause: () => simulate26
});

// src/DelegationFramework/SimpleFactory/read.ts
var read_exports9 = {};
__export(read_exports9, {
  getCreate2Address: () => read24
});

// src/DelegationFramework/SimpleFactory/methods/getCreate2Address.ts


var read24 = (client, factoryAddress, creationCode, salt) => {
  return _actions.readContract.call(void 0, client, {
    address: factoryAddress,
    abi: _delegationabis.SimpleFactory.abi,
    functionName: "computeAddress",
    args: [creationCode, salt]
  });
};

// src/DelegationFramework/SimpleFactory/simulate.ts
var simulate_exports7 = {};
__export(simulate_exports7, {
  create2Deploy: () => simulate13
});

// src/DelegationFramework/SimpleFactory/execute.ts
var execute_exports4 = {};
__export(execute_exports4, {
  create2Deploy: () => execute
});

// src/DelegationFramework/index.ts
var encode27 = {
  ...encode_exports,
  ...encode_exports2,
  ...encode_exports5,
  ...encode_exports4,
  ...encode_exports6,
  ...encode_exports7,
  ...encode_exports3
};
var execute10 = {
  ...execute_exports,
  ...execute_exports2,
  ...execute_exports3,
  ...execute_exports4
};
var read25 = {
  ...read_exports5,
  ...read_exports6,
  ...read_exports2,
  ...read_exports,
  ...read_exports4,
  ...read_exports7,
  ...read_exports8,
  ...read_exports9
};
var simulate27 = {
  ...simulate_exports3,
  ...simulate_exports4,
  ...simulate_exports,
  ...simulate_exports2,
  ...simulate_exports5,
  ...simulate_exports6,
  ...simulate_exports7
};
var constants = {
  DelegationManager: constants_exports,
  HybridDeleGator: constants_exports2,
  MultiSigDeleGator: constants_exports3
};
var DelegationFramework = {
  encode: encode27,
  execute: execute10,
  read: read25,
  simulate: simulate27,
  constants,
  utils: utils_exports
};




exports.DelegationFramework = DelegationFramework; exports.resolveSignatory = resolveSignatory; exports.toMetaMaskSmartAccount = toMetaMaskSmartAccount;
//# sourceMappingURL=index.js.map