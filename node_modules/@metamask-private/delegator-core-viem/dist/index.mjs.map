{"version":3,"sources":["../src/index.ts","../src/toMetaMaskSmartAccount.ts","../src/signatory.ts","../src/counterfactualAccountData.ts","../src/DelegationFramework/HybridDeleGator/encode.ts","../src/DelegationFramework/HybridDeleGator/methods/addKey.ts","../src/DelegationFramework/HybridDeleGator/methods/initialize.ts","../src/DelegationFramework/HybridDeleGator/methods/reinitialize.ts","../src/DelegationFramework/HybridDeleGator/methods/removeKey.ts","../src/DelegationFramework/HybridDeleGator/methods/updateSigners.ts","../src/DelegationFramework/MultiSigDeleGator/encode.ts","../src/DelegationFramework/MultiSigDeleGator/methods/addSigner.ts","../src/DelegationFramework/MultiSigDeleGator/methods/initialize.ts","../src/DelegationFramework/MultiSigDeleGator/methods/reinitialize.ts","../src/DelegationFramework/MultiSigDeleGator/methods/removeSigner.ts","../src/DelegationFramework/MultiSigDeleGator/methods/replaceSigner.ts","../src/DelegationFramework/MultiSigDeleGator/methods/updateThreshold.ts","../src/DelegationFramework/MultiSigDeleGator/methods/updateMultiSigParameters.ts","../src/DelegationFramework/SimpleFactory/encode.ts","../src/DelegationFramework/SimpleFactory/methods/create2Deploy.ts","../src/DelegationFramework/utils.ts","../src/DelegationFramework/DeleGatorCore/methods/getDelegationManager.ts","../src/DelegationFramework/DeleGatorCore/methods/getDeposit.ts","../src/DelegationFramework/DeleGatorCore/methods/getEntryPoint.ts","../src/DelegationFramework/DeleGatorCore/methods/getNonce.ts","../src/DelegationFramework/DeleGatorCore/methods/getProxyImplementation.ts","../src/DelegationFramework/DeleGatorCore/methods/getProxyVersion.ts","../src/encodeCalls.ts","../src/DelegationFramework/DeleGatorCore/encode.ts","../src/DelegationFramework/DeleGatorCore/methods/disableDelegation.ts","../src/DelegationFramework/DeleGatorCore/methods/enableDelegation.ts","../src/DelegationFramework/DeleGatorCore/methods/execute.ts","../src/DelegationFramework/DeleGatorCore/methods/executeWithMode.ts","../src/DelegationFramework/DeleGatorCore/methods/upgradeToAndCall.ts","../src/DelegationFramework/EntryPoint/read.ts","../src/DelegationFramework/EntryPoint/methods/getNonce.ts","../src/DelegationFramework/DelegationManager/encode.ts","../src/DelegationFramework/DelegationManager/methods/disableDelegation.ts","../src/DelegationFramework/DelegationManager/methods/enableDelegation.ts","../src/DelegationFramework/DelegationManager/methods/redeemDelegations.ts","../src/DelegationFramework/DelegationManager/execute.ts","../src/DelegationFramework/DelegationManager/read.ts","../src/DelegationFramework/DelegationManager/methods/getAnyDelegate.ts","../src/DelegationFramework/DelegationManager/methods/getRootAuthority.ts","../src/DelegationFramework/DelegationManager/simulate.ts","../src/DelegationFramework/DelegationManager/constants.ts","../src/DelegationFramework/DeleGatorCore/simulate.ts","../src/DelegationFramework/EIP712/read.ts","../src/DelegationFramework/EIP712/methods/getContractName.ts","../src/DelegationFramework/EIP712/methods/getContractVersion.ts","../src/DelegationFramework/EIP712/methods/getDomainVersion.ts","../src/DelegationFramework/HybridDeleGator/read.ts","../src/DelegationFramework/HybridDeleGator/methods/getKey.ts","../src/DelegationFramework/HybridDeleGator/methods/getKeyIdHashes.ts","../src/DelegationFramework/HybridDeleGator/methods/getKeyIdHashesCount.ts","../src/DelegationFramework/HybridDeleGator/simulate.ts","../src/DelegationFramework/HybridDeleGator/constants.ts","../src/DelegationFramework/MultiSigDeleGator/read.ts","../src/DelegationFramework/MultiSigDeleGator/methods/getSigners.ts","../src/DelegationFramework/MultiSigDeleGator/methods/getSignersCount.ts","../src/DelegationFramework/MultiSigDeleGator/methods/getThreshold.ts","../src/DelegationFramework/MultiSigDeleGator/methods/isSigner.ts","../src/DelegationFramework/MultiSigDeleGator/methods/getMaxNumberOfSigners.ts","../src/DelegationFramework/MultiSigDeleGator/simulate.ts","../src/DelegationFramework/MultiSigDeleGator/constants.ts","../src/DelegationFramework/Ownable2Step/read.ts","../src/DelegationFramework/Ownable2Step/methods/getPendingOwner.ts","../src/DelegationFramework/Ownable2Step/methods/getOwner.ts","../src/DelegationFramework/Ownable2Step/execute.ts","../src/DelegationFramework/Ownable2Step/methods/transferOwnership.ts","../src/DelegationFramework/Ownable2Step/methods/renounceOwnership.ts","../src/DelegationFramework/Ownable2Step/methods/acceptOwnership.ts","../src/DelegationFramework/Ownable2Step/encode.ts","../src/DelegationFramework/Ownable2Step/simulate.ts","../src/DelegationFramework/Pausable/read.ts","../src/DelegationFramework/Pausable/methods/isPaused.ts","../src/DelegationFramework/Pausable/execute.ts","../src/DelegationFramework/Pausable/methods/pause.ts","../src/DelegationFramework/Pausable/methods/unpause.ts","../src/DelegationFramework/Pausable/encode.ts","../src/DelegationFramework/Pausable/simulate.ts","../src/DelegationFramework/SimpleFactory/read.ts","../src/DelegationFramework/SimpleFactory/methods/getCreate2Address.ts","../src/DelegationFramework/SimpleFactory/simulate.ts","../src/DelegationFramework/SimpleFactory/execute.ts","../src/DelegationFramework/index.ts"],"sourcesContent":["// Re-export the contents of the delegation-utils package\nexport * from '@metamask-private/delegation-utils';\n\nexport * from './toMetaMaskSmartAccount';\nexport * from './signatory';\n\n// Types\nexport type * from './types';\n\n// Delegation Framework\nexport * from './DelegationFramework';\n","import { type Address, type Hex } from 'viem';\nimport {\n  entryPoint07Abi,\n  toPackedUserOperation,\n  toSmartAccount,\n} from 'viem/account-abstraction';\nimport {\n  getDeleGatorEnvironment,\n  Implementation,\n  HybridDeleGator,\n  MultiSigDeleGator,\n  SIGNABLE_USER_OP_TYPED_DATA,\n  SIGNABLE_DELEGATION_TYPED_DATA,\n} from '@metamask-private/delegation-utils';\n\nimport { resolveSignatory } from './signatory';\nimport { getCounterfactualAccountData } from './counterfactualAccountData';\nimport { encodeCallsForCaller } from './encodeCalls';\nimport type {\n  ToMetaMaskSmartAccountParameters,\n  ToMetaMaskSmartAccountReturnType,\n  SignDelegationParams,\n  SignUserOperationParams,\n  Call,\n} from './types';\nimport { getNonce as _getNonce } from './DelegationFramework/EntryPoint/read';\n\nconst ENTRYPOINT_VERSION = '0.7' as const;\n\n/**\n * Creates a MetaMask DeleGator smart account instance.\n *\n * @template TImplementation - The type of implementation, extending Implementation.\n * @param params - The parameters for creating the smart account.\n * @resolves to a MetaMask DeleGator smart account instance.\n *\n * @remarks\n * This function sets up a MetaMask DeleGator smart account with the specified implementation.\n * It handles both deployed accounts, and counterfactual accounts.\n * A caller may specify a DeleGator environment, otherwise the environment will be inferred from the chain.\n */\nexport async function toMetaMaskSmartAccount<\n  TImplementation extends Implementation,\n>(\n  params: ToMetaMaskSmartAccountParameters<TImplementation>,\n): Promise<ToMetaMaskSmartAccountReturnType<TImplementation>> {\n  const {\n    client,\n    client: { chain },\n    implementation,\n  } = params;\n\n  if (!chain) {\n    throw new Error('Chain not specified');\n  }\n\n  const signatory = resolveSignatory({\n    implementation,\n    signatory: params.signatory,\n  });\n\n  const environment = params.environment ?? getDeleGatorEnvironment(chain.id);\n\n  const implementationContractName =\n    implementation === Implementation.Hybrid\n      ? 'HybridDeleGator'\n      : 'MultiSigDeleGator';\n\n  let address: Address, factoryData: Hex | undefined;\n\n  if (params.address) {\n    factoryData = undefined;\n    address = params.address;\n  } else {\n    const accountData = await getCounterfactualAccountData(\n      environment.SimpleFactory,\n      environment.implementations,\n      implementation,\n      params.deployParams,\n      params.deploySalt,\n    );\n\n    address = accountData.address;\n    factoryData = accountData.factoryData;\n  }\n\n  const entryPoint = {\n    abi: entryPoint07Abi,\n    address: environment.EntryPoint,\n    version: ENTRYPOINT_VERSION,\n  } as const;\n\n  const getFactoryArgs = async () => {\n    if (factoryData === undefined) {\n      throw new Error(\n        'Deploy params were not provided, so factory args cannot be inferred',\n      );\n    }\n    return {\n      factoryData,\n      factory: environment.SimpleFactory,\n    };\n  };\n\n  const signDelegation = (params: SignDelegationParams) => {\n    const { delegation, chainId } = params;\n\n    // todo: call into utils function\n    const signature = signatory.signTypedData({\n      domain: {\n        chainId: chainId || chain.id,\n        name: 'DelegationManager',\n        version: '1',\n        verifyingContract: environment.DelegationManager,\n      },\n      types: SIGNABLE_DELEGATION_TYPED_DATA,\n      primaryType: 'Delegation',\n      message: delegation,\n    });\n\n    return signature;\n  };\n\n  const signUserOperation = async (params: SignUserOperationParams) => {\n    const { chainId } = params;\n\n    const packedUserOp = toPackedUserOperation({\n      sender: address,\n      ...params,\n    });\n\n    const signature = await signatory.signTypedData({\n      domain: {\n        chainId: chainId || chain.id,\n        name: implementationContractName,\n        version: '1',\n        verifyingContract: address,\n      },\n      types: SIGNABLE_USER_OP_TYPED_DATA,\n      primaryType: 'PackedUserOperation',\n      message: packedUserOp,\n    });\n\n    return signature;\n  };\n\n  // todo: instead of the Abi this should be the encoder namespace from utils\n  const delegatorAbi = (\n    implementation === Implementation.Hybrid\n      ? HybridDeleGator.abi\n      : MultiSigDeleGator.abi\n  ) as TImplementation extends Implementation.Hybrid\n    ? typeof HybridDeleGator.abi\n    : typeof MultiSigDeleGator.abi;\n\n  const getAddress = async () => address;\n\n  const getNonce = () => _getNonce(client, environment.EntryPoint, address, 0n);\n\n  const encodeCalls = async (calls: readonly Call[]) =>\n    encodeCallsForCaller(address, calls);\n\n  return toSmartAccount({\n    abi: delegatorAbi,\n    client,\n    entryPoint,\n    environment,\n    getAddress,\n    getFactoryArgs,\n    encodeCalls,\n    getNonce,\n    signUserOperation,\n    signDelegation,\n    ...signatory,\n  });\n}\n","import {\n  Address,\n  concat,\n  type Hex,\n  type SignableMessage,\n  type TypedData,\n  type TypedDataDefinition,\n} from 'viem';\n\nimport type { SignReturnType as WebAuthnSignReturnType } from 'webauthn-p256';\nimport {\n  createDummyWebAuthnSignature,\n  encodeDeleGatorSignature,\n  Implementation,\n} from '@metamask-private/delegation-utils';\nimport {\n  AccountSignatoryConfig,\n  HybridSignatoryConfig,\n  InternalSignatory,\n  MultiSigSignatoryConfig,\n  SignatoryConfigByImplementation,\n  WalletSignatoryConfig,\n} from './types';\n\nconst EOA_STUB_SIGNATURE =\n  '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000' as const;\n\nexport const resolveSignatory = <\n  TImplementation extends Implementation,\n>(config: {\n  implementation: TImplementation;\n  signatory: SignatoryConfigByImplementation<TImplementation>;\n}): InternalSignatory => {\n  const { implementation } = config;\n\n  if (implementation === Implementation.Hybrid) {\n    return resolveHybridSignatory(config.signatory as HybridSignatoryConfig);\n  } else if (implementation === Implementation.MultiSig) {\n    return resolveMultiSigSignatory(\n      config.signatory as MultiSigSignatoryConfig,\n    );\n  } else {\n    throw new Error(`Implementation type '${implementation}' not supported`);\n  }\n};\n\nconst resolveSignatoryFromWalletConfig = (\n  config: WalletSignatoryConfig,\n): InternalSignatory => {\n  return {\n    signMessage: config.walletClient.signMessage,\n    signTypedData: (typedData) => {\n      //todo: figure out this type so that we don't need the type assertion\n      return config.walletClient.signTypedData(typedData as any);\n    },\n    getStubSignature: async () => EOA_STUB_SIGNATURE,\n  };\n};\n\nconst resolveSignatoryFromAccountConfig = (config: AccountSignatoryConfig) => {\n  return {\n    signMessage: config.account.signMessage,\n    signTypedData: config.account.signTypedData,\n    getStubSignature: async () => EOA_STUB_SIGNATURE,\n  };\n};\n\nconst resolveHybridSignatory = (\n  config: HybridSignatoryConfig,\n): InternalSignatory => {\n  if ('walletClient' in config) {\n    return resolveSignatoryFromWalletConfig(config);\n  } else if ('account' in config) {\n    const { signMessage, signTypedData, getStubSignature } =\n      resolveSignatoryFromAccountConfig(config);\n    if (!signMessage) {\n      throw new Error('Account does not support signMessage');\n    }\n    if (!signTypedData) {\n      throw new Error('Account does not support signTypedData');\n    }\n    return {\n      signMessage,\n      signTypedData,\n      getStubSignature,\n    };\n  } else {\n    const { keyId, webAuthnAccount } = config;\n\n    if (webAuthnAccount.type !== 'webAuthn') {\n      throw new Error('Account is not a webAuthn account');\n    }\n\n    const encodeSignature = ({ signature, webauthn }: WebAuthnSignReturnType) =>\n      encodeDeleGatorSignature(\n        keyId,\n        signature,\n        webauthn.clientDataJSON,\n        webauthn.authenticatorData,\n      );\n\n    const signMessage = async (args: { message: SignableMessage }) =>\n      webAuthnAccount.signMessage(args).then(encodeSignature);\n    const signTypedData = async <\n      const typedData extends TypedData | Record<string, unknown>,\n      primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n    >(\n      typedDataDefinition: TypedDataDefinition<typedData, primaryType>,\n    ) =>\n      webAuthnAccount.signTypedData(typedDataDefinition).then(encodeSignature);\n\n    const getStubSignature = async () => createDummyWebAuthnSignature(keyId);\n\n    return {\n      signMessage,\n      signTypedData,\n      getStubSignature,\n    };\n  }\n};\n\nconst resolveMultiSigSignatory = (\n  config: MultiSigSignatoryConfig,\n): InternalSignatory => {\n  const resolvedSignatories = config.map((signatory) => {\n    let individualSignMessage: InternalSignatory['signMessage'];\n    let individualSignTypedData: InternalSignatory['signTypedData'];\n    let address: Address;\n    if ('walletClient' in signatory) {\n      const { signMessage, signTypedData } =\n        resolveSignatoryFromWalletConfig(signatory);\n      individualSignMessage = signMessage;\n      individualSignTypedData = signTypedData;\n\n      address = signatory.walletClient.account.address;\n    } else {\n      const { signMessage, signTypedData } =\n        resolveSignatoryFromAccountConfig(signatory);\n      if (!signMessage) {\n        throw new Error('Account does not support signMessage');\n      }\n      if (!signTypedData) {\n        throw new Error('Account does not support signTypedData');\n      }\n\n      individualSignMessage = signMessage;\n      individualSignTypedData = signTypedData;\n\n      address = signatory.account.address;\n    }\n    return {\n      address,\n      individualSignMessage,\n      individualSignTypedData,\n    };\n  });\n\n  const aggregateSignatures = (\n    signaturesWithAddress: { signature: Hex; address: Address }[],\n  ) => {\n    // signatures need to be sorted by address!\n    signaturesWithAddress.sort((a, b) => a.address.localeCompare(b.address));\n\n    return concat(signaturesWithAddress.map(({ signature }) => signature));\n  };\n\n  const signMessage = async (args: { message: SignableMessage }) => {\n    const addressAndSignatures = resolvedSignatories.map(\n      async ({ individualSignMessage, address }) => ({\n        signature: await individualSignMessage(args),\n        address,\n      }),\n    );\n\n    const signatures = await Promise.all(addressAndSignatures);\n\n    return aggregateSignatures(signatures);\n  };\n\n  const signTypedData = async <\n    const typedData extends TypedData | Record<string, unknown>,\n    primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n  >(\n    typedDataDefinition: TypedDataDefinition<typedData, primaryType>,\n  ) => {\n    const addressAndSignatures = resolvedSignatories.map(\n      async ({ individualSignTypedData, address }) => ({\n        signature: await individualSignTypedData(typedDataDefinition),\n        address,\n      }),\n    );\n\n    const signatures = await Promise.all(addressAndSignatures);\n\n    return aggregateSignatures(signatures);\n  };\n\n  const getStubSignature = async () =>\n    concat(resolvedSignatories.map(() => EOA_STUB_SIGNATURE));\n\n  return {\n    signMessage,\n    signTypedData,\n    getStubSignature,\n  };\n};\n","import {\n  DeleGatorEnvironment,\n  HybridDeleGatorDeployParams,\n  Implementation,\n  MultiSigDeleGatorDeployParams,\n} from '@metamask-private/delegation-utils';\nimport { DeployParams } from 'src/types';\nimport { Address, getContractAddress, Hex, pad } from 'viem';\nimport { initializeHybridDeleGator } from './DelegationFramework/HybridDeleGator/encode';\nimport { initializeMultiSigDeleGator } from './DelegationFramework/MultiSigDeleGator/encode';\nimport { create2Deploy as encodeCreate2Deploy } from './DelegationFramework/SimpleFactory/encode';\nimport { encodeProxyCreationCode } from './DelegationFramework/utils';\n\n/**\n * Infers counterfactual account data for a DeleGator smart account.\n *\n * @template TImplementation - The type of implementation, extending Implementation.\n * @template TDeployParams - The type of deployment parameters, defaults to DeployParams<Implementation>.\n *\n * @param environment - The DeleGator environment configuration.\n * @param implementation - The specific implementation of the smart account.\n * @param deployParams - The parameters required for deployment.\n * @param deploySalt - A hexadecimal value used as salt for deterministic address generation.\n *\n * @resolves to CounterfactualAccountData, containing the address and factory arguments.\n */\nexport const getCounterfactualAccountData = async <\n  TImplementation extends Implementation,\n>(\n  factory: Address,\n  implementations: DeleGatorEnvironment['implementations'],\n  implementation: TImplementation,\n  deployParams: DeployParams<Implementation>,\n  deploySalt: Hex,\n) => {\n  let implementationAddress: Address, initcode: Hex;\n\n  switch (implementation) {\n    case Implementation.Hybrid:\n      const [owner, keyIds, xValues, yValues] =\n        deployParams as HybridDeleGatorDeployParams;\n      implementationAddress = implementations.HybridDeleGatorImpl!;\n      const p256Owners = keyIds.map((keyId, index) => ({\n        keyId: keyId!,\n        x: xValues[index]!,\n        y: yValues[index]!,\n      }));\n      initcode = initializeHybridDeleGator(owner, p256Owners);\n      break;\n    case Implementation.MultiSig:\n      const [owners, threshold] = deployParams as MultiSigDeleGatorDeployParams;\n      implementationAddress = implementations.MultiSigDeleGatorImpl!;\n      initcode = initializeMultiSigDeleGator(owners, threshold);\n      break;\n    default:\n      throw new Error(`Implementation type '${implementation}' not supported`);\n  }\n\n  const salt = pad(deploySalt, { dir: 'left', size: 32 });\n\n  const proxyCreationCode = encodeProxyCreationCode(\n    implementationAddress,\n    initcode,\n  );\n\n  const address = getContractAddress({\n    bytecode: proxyCreationCode,\n    from: factory,\n    opcode: 'CREATE2',\n    salt,\n  });\n\n  const factoryData = encodeCreate2Deploy(proxyCreationCode, salt);\n\n  return {\n    factoryData,\n    address,\n  };\n};\n","import { encode as addKey } from './methods/addKey';\nimport { encode as initializeHybridDeleGator } from './methods/initialize';\nimport { encode as reinitializeHybridDeleGator } from './methods/reinitialize';\nimport { encode as removeKey } from './methods/removeKey';\nimport { encode as updateSigners } from './methods/updateSigners';\n\nexport {\n  addKey,\n  initializeHybridDeleGator,\n  reinitializeHybridDeleGator,\n  removeKey,\n  updateSigners,\n};\n","import { Address, Client, encodeFunctionData } from 'viem';\nimport { HybridDeleGator } from '@metamask-private/delegation-abis';\nimport { simulateContract } from 'viem/actions';\n\nimport { P256Owner } from '../../types';\n\nexport const simulate = (\n  client: Client,\n  hybridDeleGatorAddress: Address,\n  p256Owner: P256Owner,\n) => {\n  return simulateContract(client, {\n    address: hybridDeleGatorAddress,\n    abi: HybridDeleGator.abi,\n    functionName: 'addKey',\n    args: [p256Owner.keyId, p256Owner.x, p256Owner.y],\n  });\n};\n\nexport const encode = (p256Owner: P256Owner) => {\n  return encodeFunctionData({\n    abi: HybridDeleGator.abi,\n    functionName: 'addKey',\n    args: [p256Owner.keyId, p256Owner.x, p256Owner.y],\n  });\n};\n","import { Address, Client, encodeFunctionData } from 'viem';\nimport { HybridDeleGator } from '@metamask-private/delegation-abis';\nimport { simulateContract } from 'viem/actions';\n\nimport { P256Owner } from '../../types';\n\nexport const simulate = (\n  client: Client,\n  hybridDeleGatorAddress: Address,\n  eoaOwner: Address,\n  p256Owners: P256Owner[],\n) => {\n  return simulateContract(client, {\n    address: hybridDeleGatorAddress,\n    abi: HybridDeleGator.abi,\n    functionName: 'initialize',\n    args: [\n      eoaOwner,\n      p256Owners.map((p256Owner) => p256Owner.keyId),\n      p256Owners.map((p256Owner) => p256Owner.x),\n      p256Owners.map((p256Owner) => p256Owner.y),\n    ],\n  });\n};\n\nexport const encode = (eoaOwner: Address, p256Owners: P256Owner[]) => {\n  return encodeFunctionData({\n    abi: HybridDeleGator.abi,\n    functionName: 'initialize',\n    args: [\n      eoaOwner,\n      p256Owners.map((p256Owner) => p256Owner.keyId),\n      p256Owners.map((p256Owner) => p256Owner.x),\n      p256Owners.map((p256Owner) => p256Owner.y),\n    ],\n  });\n};\n","import { Address, Client, encodeFunctionData } from 'viem';\nimport { HybridDeleGator } from '@metamask-private/delegation-abis';\nimport { simulateContract } from 'viem/actions';\nimport { P256Owner } from '../../types';\n\nexport const simulate = (\n  client: Client,\n  hybridDeleGatorAddress: Address,\n  version: number,\n  eoaOwner: Address,\n  p256Owners: P256Owner[],\n  removeExistingP256Owners: boolean,\n) => {\n  return simulateContract(client, {\n    address: hybridDeleGatorAddress,\n    abi: HybridDeleGator.abi,\n    functionName: 'reinitialize',\n    args: [\n      version,\n      eoaOwner,\n      p256Owners.map((p256Owner) => p256Owner.keyId),\n      p256Owners.map((p256Owner) => p256Owner.x),\n      p256Owners.map((p256Owner) => p256Owner.y),\n      removeExistingP256Owners,\n    ],\n  });\n};\n\nexport const encode = (\n  version: number,\n  eoaOwner: Address,\n  p256Owners: P256Owner[],\n  removeExistingP256Owners: boolean,\n) => {\n  return encodeFunctionData({\n    abi: HybridDeleGator.abi,\n    functionName: 'reinitialize',\n    args: [\n      version,\n      eoaOwner,\n      p256Owners.map((p256Owner) => p256Owner.keyId),\n      p256Owners.map((p256Owner) => p256Owner.x),\n      p256Owners.map((p256Owner) => p256Owner.y),\n      removeExistingP256Owners,\n    ],\n  });\n};\n","import { Address, Client, encodeFunctionData } from 'viem';\nimport { HybridDeleGator } from '@metamask-private/delegation-abis';\nimport { simulateContract } from 'viem/actions';\n\nexport const simulate = (\n  client: Client,\n  hybridDeleGatorAddress: Address,\n  keyId: string,\n) => {\n  return simulateContract(client, {\n    address: hybridDeleGatorAddress,\n    abi: HybridDeleGator.abi,\n    functionName: 'removeKey',\n    args: [keyId],\n  });\n};\n\nexport const encode = (keyId: string) => {\n  return encodeFunctionData({\n    abi: HybridDeleGator.abi,\n    functionName: 'removeKey',\n    args: [keyId],\n  });\n};\n","import { Address, Client, encodeFunctionData } from 'viem';\nimport { HybridDeleGator } from '@metamask-private/delegation-abis';\nimport { simulateContract } from 'viem/actions';\n\nimport { P256Owner } from '../../types';\n\nexport const simulate = (\n  client: Client,\n  hybridDeleGatorAddress: Address,\n  eoaOwner: Address,\n  p256Owners: P256Owner[],\n) => {\n  return simulateContract(client, {\n    address: hybridDeleGatorAddress,\n    abi: HybridDeleGator.abi,\n    functionName: 'updateSigners',\n    args: [\n      eoaOwner,\n      p256Owners.map((p256Owner) => p256Owner.keyId),\n      p256Owners.map((p256Owner) => p256Owner.x),\n      p256Owners.map((p256Owner) => p256Owner.y),\n    ],\n  });\n};\n\nexport const encode = (eoaOwner: Address, p256Owners: P256Owner[]) => {\n  return encodeFunctionData({\n    abi: HybridDeleGator.abi,\n    functionName: 'updateSigners',\n    args: [\n      eoaOwner,\n      p256Owners.map((p256Owner) => p256Owner.keyId),\n      p256Owners.map((p256Owner) => p256Owner.x),\n      p256Owners.map((p256Owner) => p256Owner.y),\n    ],\n  });\n};\n","import { encode as addSigner } from './methods/addSigner';\nimport { encode as initializeMultiSigDeleGator } from './methods/initialize';\nimport { encode as reinitializeMultiSigDeleGator } from './methods/reinitialize';\nimport { encode as removeSigner } from './methods/removeSigner';\nimport { encode as replaceSigner } from './methods/replaceSigner';\nimport { encode as updateThreshold } from './methods/updateThreshold';\nimport { encode as updateMultiSigParameters } from './methods/updateMultiSigParameters';\n\nexport {\n  addSigner,\n  initializeMultiSigDeleGator,\n  reinitializeMultiSigDeleGator,\n  removeSigner,\n  replaceSigner,\n  updateThreshold,\n  updateMultiSigParameters,\n};\n","import { Address, Client, encodeFunctionData } from 'viem';\nimport { MultiSigDeleGator } from '@metamask-private/delegation-abis';\nimport { simulateContract } from 'viem/actions';\n\nexport const simulate = (\n  client: Client,\n  multiSigDeleGatorAddress: Address,\n  signer: Address,\n) => {\n  return simulateContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'addSigner',\n    args: [signer],\n  });\n};\n\nexport const encode = (signer: Address) => {\n  return encodeFunctionData({\n    abi: MultiSigDeleGator.abi,\n    functionName: 'addSigner',\n    args: [signer],\n  });\n};\n","import { Address, Client, encodeFunctionData } from 'viem';\nimport { MultiSigDeleGator } from '@metamask-private/delegation-abis';\nimport { simulateContract } from 'viem/actions';\n\nexport const simulate = (\n  client: Client,\n  multiSigDeleGatorAddress: Address,\n  owners: Address[],\n  threshold: bigint,\n) => {\n  return simulateContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'initialize',\n    args: [owners, threshold],\n  });\n};\n\nexport const encode = (owners: Address[], threshold: bigint) => {\n  return encodeFunctionData({\n    abi: MultiSigDeleGator.abi,\n    functionName: 'initialize',\n    args: [owners, threshold],\n  });\n};\n","import { Address, Client, encodeFunctionData } from 'viem';\nimport { MultiSigDeleGator } from '@metamask-private/delegation-abis';\nimport { simulateContract } from 'viem/actions';\n\nexport const simulate = (\n  client: Client,\n  multiSigDeleGatorAddress: Address,\n  version: bigint,\n  owners: Address[],\n  threshold: bigint,\n  removeExistingOwners: boolean,\n) => {\n  return simulateContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'reinitialize',\n    args: [version, owners, threshold, removeExistingOwners],\n  });\n};\n\nexport const encode = (\n  version: bigint,\n  owners: Address[],\n  threshold: bigint,\n  removeExistingOwners: boolean,\n) => {\n  return encodeFunctionData({\n    abi: MultiSigDeleGator.abi,\n    functionName: 'reinitialize',\n    args: [version, owners, threshold, removeExistingOwners],\n  });\n};\n","import { Address, Client, encodeFunctionData } from 'viem';\nimport { MultiSigDeleGator } from '@metamask-private/delegation-abis';\nimport { simulateContract } from 'viem/actions';\n\nexport const simulate = (\n  client: Client,\n  multiSigDeleGatorAddress: Address,\n  signer: Address,\n) => {\n  return simulateContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'removeSigner',\n    args: [signer],\n  });\n};\n\nexport const encode = (signer: Address) => {\n  return encodeFunctionData({\n    abi: MultiSigDeleGator.abi,\n    functionName: 'removeSigner',\n    args: [signer],\n  });\n};\n","import { Address, Client, encodeFunctionData } from 'viem';\nimport { MultiSigDeleGator } from '@metamask-private/delegation-abis';\nimport { simulateContract } from 'viem/actions';\n\nexport const simulate = (\n  client: Client,\n  multiSigDeleGatorAddress: Address,\n  oldSigner: Address,\n  newSigner: Address,\n) => {\n  return simulateContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'replaceSigner',\n    args: [oldSigner, newSigner],\n  });\n};\n\nexport const encode = (oldSigner: Address, newSigner: Address) => {\n  return encodeFunctionData({\n    abi: MultiSigDeleGator.abi,\n    functionName: 'replaceSigner',\n    args: [oldSigner, newSigner],\n  });\n};\n","import { Address, Client, encodeFunctionData } from 'viem';\nimport { MultiSigDeleGator } from '@metamask-private/delegation-abis';\nimport { simulateContract } from 'viem/actions';\n\nexport const simulate = (\n  client: Client,\n  multiSigDeleGatorAddress: Address,\n  threshold: bigint,\n) => {\n  return simulateContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'updateThreshold',\n    args: [threshold],\n  });\n};\n\nexport const encode = (threshold: bigint) => {\n  return encodeFunctionData({\n    abi: MultiSigDeleGator.abi,\n    functionName: 'updateThreshold',\n    args: [threshold],\n  });\n};\n","import { Address, Client, encodeFunctionData } from 'viem';\nimport { MultiSigDeleGator } from '@metamask-private/delegation-abis';\nimport { simulateContract } from 'viem/actions';\n\nexport const simulate = (\n  client: Client,\n  multiSigDeleGatorAddress: Address,\n  owners: Address[],\n  threshold: bigint,\n  removeExistingOwners: boolean,\n) => {\n  return simulateContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'updateMultiSigParameters',\n    args: [owners, threshold, removeExistingOwners],\n  });\n};\n\nexport const encode = (\n  owners: Address[],\n  threshold: bigint,\n  removeExistingOwners: boolean,\n) => {\n  return encodeFunctionData({\n    abi: MultiSigDeleGator.abi,\n    functionName: 'updateMultiSigParameters',\n    args: [owners, threshold, removeExistingOwners],\n  });\n};\n","import { encode as create2Deploy } from './methods/create2Deploy';\n\nexport { create2Deploy };\n","import { Address, Hex, Client, encodeFunctionData } from 'viem';\nimport { SimpleFactory } from '@metamask-private/delegation-abis';\nimport { simulateContract, writeContract } from 'viem/actions';\n\nimport { InitializedClient } from '../../types';\n\nexport const simulate = (\n  client: Client,\n  factoryAddress: Address,\n  creationCode: Hex,\n  salt: Hex,\n) => {\n  return simulateContract(client, {\n    address: factoryAddress,\n    abi: SimpleFactory.abi,\n    functionName: 'deploy',\n    args: [creationCode, salt],\n  });\n};\n\nexport const encode = (creationCode: Hex, salt: Hex) => {\n  return encodeFunctionData({\n    abi: SimpleFactory.abi,\n    functionName: 'deploy',\n    args: [creationCode, salt],\n  });\n};\n\nexport const execute = async (\n  client: InitializedClient,\n  factoryAddress: Address,\n  creationCode: Hex,\n  salt: Hex,\n) => {\n  const { request } = await simulate(\n    client,\n    factoryAddress,\n    creationCode,\n    salt,\n  );\n  return writeContract(client, request);\n};\n","import { Abi, Address, Client, encodeDeployData, Hex } from 'viem';\nimport { ERC1967Proxy } from '@metamask-private/delegation-utils';\n\nimport { getProxyImplementation } from './DeleGatorCore/read';\nimport { getCode } from 'viem/actions';\n\n// Where a function signature is duplicated across contracts, we need to narrow\n// the ABI type passed as the `simulateContract` generic argument. Without this,\n// the `simulate()` return type would not match, despite being functionally\n// identical.\nexport type NarrowAbiToFunction<\n  TAbi extends Abi,\n  FunctionName extends string,\n> = [\n  Extract<\n    TAbi[number],\n    {\n      type: 'function';\n      name: FunctionName;\n    }\n  >[],\n];\n\nexport async function isContractDeployed(\n  client: Client,\n  contractAddress: Address,\n) {\n  const code = await getCode(client, {\n    address: contractAddress,\n  });\n  return !!code && code !== '0x';\n}\n\nexport async function isImplementationExpected(\n  client: Client,\n  contractAddress: Address,\n  expectedImplementationAddress: Address,\n) {\n  if (!(await isContractDeployed(client, contractAddress))) return false;\n\n  const implementationAddress = await getProxyImplementation(\n    client,\n    contractAddress,\n  );\n\n  return implementationAddress === expectedImplementationAddress;\n}\n\n/**\n * Encodes the \"creation code\" for an ERC1967Proxy contract that will be deployed via CREATE2 with the given implementation and initialization code.\n *\n * @param implementationAddress The address of the implementation contract for the proxy to use.\n * @param initcode The calldata for the initialization function of the implementation contract.\n * @returns The encoded creation code for the proxy.\n */\nexport const encodeProxyCreationCode = (\n  implementationAddress: Address,\n  initcode: Hex,\n) =>\n  encodeDeployData({\n    abi: ERC1967Proxy.abi,\n    args: [implementationAddress, initcode],\n    bytecode: ERC1967Proxy.bytecode,\n  });\n","import { DeleGatorCore } from '@metamask-private/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport const read = async (client: Client, contractAddress: Address) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: DeleGatorCore.abi,\n    functionName: 'delegationManager',\n  });\n","import { DeleGatorCore } from '@metamask-private/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport const read = async (client: Client, contractAddress: Address) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: DeleGatorCore.abi,\n    functionName: 'getDeposit',\n  });\n","import { DeleGatorCore } from '@metamask-private/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport const read = async (client: Client, contractAddress: Address) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: DeleGatorCore.abi,\n    functionName: 'entryPoint',\n  });\n","import { DeleGatorCore } from '@metamask-private/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport const read = async (\n  client: Client,\n  contractAddress: Address,\n  key?: bigint,\n) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: DeleGatorCore.abi,\n    functionName: 'getNonce',\n    args: !!key ? [key] : undefined,\n  });\n","import { DeleGatorCore } from '@metamask-private/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport const read = async (client: Client, contractAddress: Address) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: DeleGatorCore.abi,\n    functionName: 'getImplementation',\n  });\n","import { DeleGatorCore } from '@metamask-private/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport const read = async (client: Client, contractAddress: Address) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: DeleGatorCore.abi,\n    functionName: 'getInitializedVersion',\n  });\n","import { Address, type Hex } from 'viem';\nimport { Call } from './types';\nimport { BATCH_DEFAULT_MODE, createExecution } from '@metamask-private/delegation-utils';\nimport {\n  execute,\n  executeWithMode,\n} from './DelegationFramework/DeleGatorCore/encode';\n\n/**\n * Encodes calls for execution by a DeleGator smart contract.\n *\n * @param caller - The address of the DeleGator contract.\n * @param calls - An array of Call objects, each containing 'to', optional 'data', and optional 'value'.\n * @returns A promise that resolves to the encoded function data as a hexadecimal string.\n *\n * @remarks\n * - If there's a single call directly to the delegator, it returns the call data directly.\n * - For multiple calls or calls to other addresses, it creates executions and encodes them for the DeleGator's execute function.\n * - The execution mode is set to SINGLE_DEFAULT_MODE for a single call, or BATCH_DEFAULT_MODE for multiple calls.\n *\n * todo: This doesn't fully expose the flexibility of the DeleGator's execute function, but it's a start.\n * maybe we add a mechanism where individual calls passed to this function can be encoded batches.\n */\nexport const encodeCallsForCaller = async (\n  caller: Address,\n  calls: readonly Call[],\n): Promise<Hex> => {\n  if (calls.length === 1) {\n    const call = calls[0]!;\n    if (call.to === caller) {\n      // if there's a single call, and it's to the delegator, we can just return the calldata directly.\n      return call.data || '0x';\n    }\n  }\n  return encodeCalls(calls);\n};\n\n/**\n * If there's a single call, encode the shorthand `execute` function. Otherwise, encode the `executeWithMode` function. Execution type will always be \"default\".\n *\n * TODO: Make this more flexible to allow for more granular control over the execution type. If execution type is \"try\" we cannot use the gas efficient `execute` function.\n *\n * @param calls the calls to execute\n * @returns the encoded calldata for the DeleGator to execute the calls\n */\nexport const encodeCalls = (calls: readonly Call[]) => {\n  if (calls.length === 1) {\n    const call = calls[0]!;\n    const execution = createExecution(call.to, call.value, call.data);\n    return execute(execution);\n  }\n\n  const executions = calls.map(({ to, value, data }) =>\n    createExecution(to, value, data),\n  );\n  return executeWithMode(BATCH_DEFAULT_MODE, executions);\n};\n","import { encode as disableDelegation } from './methods/disableDelegation';\nimport { encode as enableDelegation } from './methods/enableDelegation';\nimport { encode as execute } from './methods/execute';\nimport { encode as executeWithMode } from './methods/executeWithMode';\nimport { encode as upgradeToAndCall } from './methods/upgradeToAndCall';\n\nexport {\n  disableDelegation,\n  enableDelegation,\n  execute,\n  executeWithMode,\n  upgradeToAndCall,\n};\n","import { Address, Client, encodeFunctionData } from 'viem';\nimport { DeleGatorCore } from '@metamask-private/delegation-abis';\nimport { DelegationStruct } from '@metamask-private/delegation-utils';\nimport { simulateContract } from 'viem/actions';\nimport { NarrowAbiToFunction } from '../../utils';\n\nexport const simulate = (\n  client: Client,\n  contractAddress: Address,\n  delegation: DelegationStruct,\n) => {\n  const abi = DeleGatorCore.abi as any as NarrowAbiToFunction<\n    typeof DeleGatorCore.abi,\n    'disableDelegation'\n  >;\n\n  return simulateContract(client, {\n    address: contractAddress,\n    abi,\n    functionName: 'disableDelegation',\n    args: [delegation],\n  });\n};\n\nexport const encode = (delegation: DelegationStruct) => {\n  return encodeFunctionData({\n    abi: DeleGatorCore.abi,\n    functionName: 'disableDelegation',\n    args: [delegation],\n  });\n};\n","import { Address, Client, encodeFunctionData } from 'viem';\nimport { DeleGatorCore } from '@metamask-private/delegation-abis';\nimport { DelegationStruct } from '@metamask-private/delegation-utils';\nimport { simulateContract } from 'viem/actions';\nimport { NarrowAbiToFunction } from '../../utils';\n\nexport const simulate = (\n  client: Client,\n  contractAddress: Address,\n  delegation: DelegationStruct,\n) => {\n  const abi = DeleGatorCore.abi as any as NarrowAbiToFunction<\n    typeof DeleGatorCore.abi,\n    'enableDelegation'\n  >;\n\n  return simulateContract(client, {\n    address: contractAddress,\n    abi,\n    functionName: 'enableDelegation',\n    args: [delegation],\n  });\n};\n\nexport const encode = (delegation: DelegationStruct) => {\n  return encodeFunctionData({\n    abi: DeleGatorCore.abi,\n    functionName: 'enableDelegation',\n    args: [delegation],\n  });\n};\n","import { Address, Client, encodeFunctionData } from 'viem';\nimport { DeleGatorCore } from '@metamask-private/delegation-abis';\nimport { ExecutionStruct } from '@metamask-private/delegation-utils';\nimport { simulateContract } from 'viem/actions';\n\nexport const simulate = (\n  client: Client,\n  contractAddress: Address,\n  execution: ExecutionStruct,\n) => {\n  return simulateContract(client, {\n    address: contractAddress,\n    abi: DeleGatorCore.abi,\n    functionName: 'execute',\n    args: [execution],\n  });\n};\n\nexport const encode = (execution: ExecutionStruct) => {\n  return encodeFunctionData({\n    abi: DeleGatorCore.abi,\n    functionName: 'execute',\n    args: [execution],\n  });\n};\n","import { Address, Client, encodeFunctionData } from 'viem';\nimport { DeleGatorCore } from '@metamask-private/delegation-abis';\nimport {\n  encodeExecutionCalldata,\n  ExecutionStruct,\n  ExecutionMode,\n} from '@metamask-private/delegation-utils';\nimport { simulateContract } from 'viem/actions';\n\nexport const simulate = (\n  client: Client,\n  contractAddress: Address,\n  mode: ExecutionMode,\n  executions: ExecutionStruct[],\n) => {\n  return simulateContract(client, {\n    address: contractAddress,\n    abi: DeleGatorCore.abi,\n    functionName: 'execute',\n    args: [mode, encodeExecutionCalldata(executions)],\n  });\n};\n\nexport const encode = (mode: ExecutionMode, executions: ExecutionStruct[]) => {\n  return encodeFunctionData({\n    abi: DeleGatorCore.abi,\n    functionName: 'execute',\n    args: [mode, encodeExecutionCalldata(executions)],\n  });\n};\n","import { Address, Hex, Client, encodeFunctionData } from 'viem';\nimport { DeleGatorCore } from '@metamask-private/delegation-abis';\nimport { simulateContract } from 'viem/actions';\n\nexport const simulate = (\n  client: Client,\n  contractAddress: Address,\n  implementation: Address,\n  data: Hex,\n) => {\n  return simulateContract(client, {\n    address: contractAddress,\n    abi: DeleGatorCore.abi,\n    functionName: 'upgradeToAndCall',\n    args: [implementation, data],\n  });\n};\n\nexport const encode = (implementation: Address, data: Hex) => {\n  return encodeFunctionData({\n    abi: DeleGatorCore.abi,\n    functionName: 'upgradeToAndCall',\n    args: [implementation, data],\n  });\n};\n","import { read as getNonce } from './methods/getNonce';\n\nexport { getNonce };\n","import { EntryPoint } from '@metamask-private/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport const read = async (\n  client: Client,\n  entryPoint: Address,\n  contractAddress: Address,\n  key: bigint,\n) =>\n  await readContract(client, {\n    address: entryPoint,\n    abi: EntryPoint.abi,\n    functionName: 'getNonce',\n    args: [contractAddress, key],\n  });\n","import { encode as disableDelegation } from './methods/disableDelegation';\nimport { encode as enableDelegation } from './methods/enableDelegation';\nimport { encode as redeemDelegations } from './methods/redeemDelegations';\n\nexport { disableDelegation, enableDelegation, redeemDelegations };\n","import { Address, Client, encodeFunctionData } from 'viem';\nimport { DelegationManager } from '@metamask-private/delegation-abis';\nimport { DelegationStruct } from '@metamask-private/delegation-utils';\nimport { simulateContract, writeContract } from 'viem/actions';\n\nimport { InitializedClient } from '../../types';\nimport { NarrowAbiToFunction } from 'src/DelegationFramework/utils';\n\nexport const simulate = (\n  client: Client,\n  contractAddress: Address,\n  delegation: DelegationStruct,\n) => {\n  const abi = DelegationManager.abi as any as NarrowAbiToFunction<\n    typeof DelegationManager.abi,\n    'disableDelegation'\n  >;\n\n  return simulateContract(client, {\n    address: contractAddress,\n    abi,\n    functionName: 'disableDelegation',\n    args: [delegation],\n  });\n};\n\nexport const execute = async (\n  client: InitializedClient,\n  contractAddress: Address,\n  delegation: DelegationStruct,\n) => {\n  const { request } = await simulate(client, contractAddress, delegation);\n  return writeContract(client, request);\n};\n\nexport const encode = (delegation: DelegationStruct) => {\n  return encodeFunctionData({\n    abi: DelegationManager.abi,\n    functionName: 'disableDelegation',\n    args: [delegation],\n  });\n};\n","import { Address, Client, encodeFunctionData } from 'viem';\nimport { simulateContract, writeContract } from 'viem/actions';\nimport { DelegationManager } from '@metamask-private/delegation-abis';\nimport { DelegationStruct } from '@metamask-private/delegation-utils';\nimport { NarrowAbiToFunction } from '../../utils';\n\nimport { InitializedClient } from '../../types';\n\nexport const simulate = (\n  client: Client,\n  contractAddress: Address,\n  delegation: DelegationStruct,\n) => {\n  const abi = DelegationManager.abi as any as NarrowAbiToFunction<\n    typeof DelegationManager.abi,\n    'enableDelegation'\n  >;\n\n  return simulateContract(client, {\n    address: contractAddress,\n    abi,\n    functionName: 'enableDelegation',\n    args: [delegation],\n  });\n};\n\nexport const execute = async (\n  client: InitializedClient,\n  contractAddress: Address,\n  delegation: DelegationStruct,\n) => {\n  const { request } = await simulate(client, contractAddress, delegation);\n  return writeContract(client, request);\n};\n\nexport const encode = (delegation: DelegationStruct) => {\n  return encodeFunctionData({\n    abi: DelegationManager.abi,\n    functionName: 'enableDelegation',\n    args: [delegation],\n  });\n};\n","import { Address, Client, encodeFunctionData } from 'viem';\nimport { DelegationManager } from '@metamask-private/delegation-abis';\nimport {\n  DelegationStruct,\n  encodePermissionContexts,\n  ExecutionMode,\n  ExecutionStruct,\n  encodeExecutionCalldatas,\n} from '@metamask-private/delegation-utils';\nimport { simulateContract, writeContract } from 'viem/actions';\n\nimport { InitializedClient } from '../../types';\n\nexport const simulate = (\n  client: Client,\n  contractAddress: Address,\n  delegations: DelegationStruct[][],\n  modes: ExecutionMode[],\n  executions: ExecutionStruct[][],\n) => {\n  return simulateContract(client, {\n    address: contractAddress,\n    abi: DelegationManager.abi,\n    functionName: 'redeemDelegations',\n    args: [\n      encodePermissionContexts(delegations),\n      modes,\n      encodeExecutionCalldatas(executions),\n    ],\n  });\n};\n\nexport const execute = async (\n  client: InitializedClient,\n  contractAddress: Address,\n  delegations: DelegationStruct[][],\n  modes: ExecutionMode[],\n  executions: ExecutionStruct[][],\n) => {\n  const { request } = await simulate(\n    client,\n    contractAddress,\n    delegations,\n    modes,\n    executions,\n  );\n  return writeContract(client, request);\n};\n\nexport const encode = (\n  delegations: DelegationStruct[][],\n  modes: ExecutionMode[],\n  executions: ExecutionStruct[][],\n) => {\n  return encodeFunctionData({\n    abi: DelegationManager.abi,\n    functionName: 'redeemDelegations',\n    args: [\n      encodePermissionContexts(delegations),\n      modes,\n      encodeExecutionCalldatas(executions),\n    ],\n  });\n};\n","import { execute as disableDelegation } from './methods/disableDelegation';\nimport { execute as enableDelegation } from './methods/enableDelegation';\nimport { execute as redeemDelegations } from './methods/redeemDelegations';\n\nexport { disableDelegation, enableDelegation, redeemDelegations };\n","import { read as getAnyDelegate } from './methods/getAnyDelegate';\nimport { read as getRootAuthority } from './methods/getRootAuthority';\n\nexport { getAnyDelegate, getRootAuthority };\n","import { DelegationManager } from '@metamask-private/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport const read = async (client: Client, contractAddress: Address) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: DelegationManager.abi,\n    functionName: 'ANY_DELEGATE',\n  });\n","import { DelegationManager } from '@metamask-private/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport const read = async (client: Client, contractAddress: Address) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: DelegationManager.abi,\n    functionName: 'ROOT_AUTHORITY',\n  });\n","import { simulate as disableDelegation } from './methods/disableDelegation';\nimport { simulate as enableDelegation } from './methods/enableDelegation';\nimport { simulate as redeemDelegations } from './methods/redeemDelegations';\n\nexport { disableDelegation, enableDelegation, redeemDelegations };\n","export const NAME = 'DelegationManager';\nexport const VERSION = '1.2.0';\nexport const DOMAIN_VERSION = '1';\nexport const ROOT_AUTHORITY =\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\nexport const ANY_DELEGATE = '0x0000000000000000000000000000000000000a11';\n","import { simulate as disableDelegation } from './methods/disableDelegation';\nimport { simulate as enableDelegation } from './methods/enableDelegation';\nimport { simulate as execute } from './methods/execute';\nimport { simulate as executeWithMode } from './methods/executeWithMode';\nimport { simulate as upgradeToAndCall } from './methods/upgradeToAndCall';\n\nexport {\n  disableDelegation,\n  enableDelegation,\n  execute,\n  executeWithMode,\n  upgradeToAndCall,\n};\n","import { read as getContractName } from './methods/getContractName';\nimport { read as getContractVersion } from './methods/getContractVersion';\nimport { read as getDomainVersion } from './methods/getDomainVersion';\n\nexport { getContractName, getContractVersion, getDomainVersion };\n","import { Client, Address } from 'viem';\nimport { readContract } from 'viem/actions';\n\n// NOTE: ABIs have been extracted and minimized for reuse across contracts. These methods are included in our contracts but are not a part of the EIP712 standard itself.\n\nexport const read = async (client: Client, contractAddress: Address) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: [\n      {\n        type: 'function',\n        name: 'NAME',\n        inputs: [],\n        outputs: [\n          {\n            name: '',\n            type: 'string',\n            internalType: 'string',\n          },\n        ],\n        stateMutability: 'view',\n      },\n    ],\n    functionName: 'NAME',\n  });\n","import { Client, Address } from 'viem';\nimport { readContract } from 'viem/actions';\n\n// NOTE: ABIs have been extracted and minimized for reuse across contracts. These methods are included in our contracts but are not a part of the EIP712 standard itself.\n\nexport const read = async (client: Client, contractAddress: Address) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: [\n      {\n        type: 'function',\n        name: 'VERSION',\n        inputs: [],\n        outputs: [\n          {\n            name: '',\n            type: 'string',\n            internalType: 'string',\n          },\n        ],\n        stateMutability: 'view',\n      },\n    ],\n    functionName: 'VERSION',\n  });\n","import { Client, Address } from 'viem';\nimport { readContract } from 'viem/actions';\n\n// NOTE: ABIs have been extracted and minimized for reuse across contracts. These methods are included in our contracts but are not a part of the EIP712 standard itself.\n\nexport const read = async (client: Client, contractAddress: Address) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: [\n      {\n        type: 'function',\n        name: 'DOMAIN_VERSION',\n        inputs: [],\n        outputs: [\n          {\n            name: '',\n            type: 'string',\n            internalType: 'string',\n          },\n        ],\n        stateMutability: 'view',\n      },\n    ],\n    functionName: 'DOMAIN_VERSION',\n  });\n","import { read as getKey } from './methods/getKey';\nimport { read as getKeyIdHashes } from './methods/getKeyIdHashes';\nimport { read as getKeyIdHashesCount } from './methods/getKeyIdHashesCount';\n\nexport { getKey, getKeyIdHashes, getKeyIdHashesCount };\n","import { HybridDeleGator } from '@metamask-private/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport const read = async (\n  client: Client,\n  hybridDeleGatorAddress: Address,\n  keyId: string,\n) =>\n  await readContract(client, {\n    address: hybridDeleGatorAddress,\n    abi: HybridDeleGator.abi,\n    functionName: 'getKey',\n    args: [keyId],\n  });\n","import { HybridDeleGator } from '@metamask-private/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport const read = async (client: Client, hybridDeleGatorAddress: Address) =>\n  await readContract(client, {\n    address: hybridDeleGatorAddress,\n    abi: HybridDeleGator.abi,\n    functionName: 'getKeyIdHashes',\n  });\n","import { HybridDeleGator } from '@metamask-private/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport const read = async (client: Client, hybridDeleGatorAddress: Address) =>\n  await readContract(client, {\n    address: hybridDeleGatorAddress,\n    abi: HybridDeleGator.abi,\n    functionName: 'getKeyIdHashesCount',\n  });\n","import { simulate as addKey } from './methods/addKey';\nimport { simulate as initializeHybridDeleGator } from './methods/initialize';\nimport { simulate as reinitializeHybridDeleGator } from './methods/reinitialize';\nimport { simulate as removeKey } from './methods/removeKey';\nimport { simulate as updateSigners } from './methods/updateSigners';\n\nexport {\n  addKey,\n  initializeHybridDeleGator,\n  reinitializeHybridDeleGator,\n  removeKey,\n  updateSigners,\n};\n","export const NAME = 'HybridDeleGator';\nexport const VERSION = '1.2.0';\nexport const DOMAIN_VERSION = '1';\nexport const ROOT_AUTHORITY =\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\nexport const ANY_DELEGATE = '0x0000000000000000000000000000000000000a11';\n","import { read as getSigners } from './methods/getSigners';\nimport { read as getSignersCount } from './methods/getSignersCount';\nimport { read as getThreshold } from './methods/getThreshold';\nimport { read as isSigner } from './methods/isSigner';\nimport { read as getMaxNumberOfSigners } from './methods/getMaxNumberOfSigners';\n\nexport {\n  getSigners,\n  getSignersCount,\n  getThreshold,\n  isSigner,\n  getMaxNumberOfSigners,\n};\n","import { MultiSigDeleGator } from '@metamask-private/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport const read = async (client: Client, multiSigDeleGatorAddress: Address) =>\n  await readContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'getSigners',\n  });\n","import { MultiSigDeleGator } from '@metamask-private/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport const read = async (client: Client, multiSigDeleGatorAddress: Address) =>\n  await readContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'getSignersCount',\n  });\n","import { MultiSigDeleGator } from '@metamask-private/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport const read = async (client: Client, multiSigDeleGatorAddress: Address) =>\n  await readContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'getThreshold',\n  });\n","import { MultiSigDeleGator } from '@metamask-private/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport const read = async (\n  client: Client,\n  multiSigDeleGatorAddress: Address,\n  signer: Address,\n) =>\n  await readContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'isSigner',\n    args: [signer],\n  });\n","import { MultiSigDeleGator } from '@metamask-private/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport const read = async (client: Client, multiSigDeleGatorAddress: Address) =>\n  await readContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'MAX_NUMBER_OF_SIGNERS',\n  });\n","import { simulate as addSigner } from './methods/addSigner';\nimport { simulate as initializeMultiSigDeleGator } from './methods/initialize';\nimport { simulate as reinitializeMultiSigDeleGator } from './methods/reinitialize';\nimport { simulate as removeSigner } from './methods/removeSigner';\nimport { simulate as replaceSigner } from './methods/replaceSigner';\nimport { simulate as updateMultiSigParameters } from './methods/updateMultiSigParameters';\nimport { simulate as updateThreshold } from './methods/updateThreshold';\n\nexport {\n  addSigner,\n  initializeMultiSigDeleGator,\n  reinitializeMultiSigDeleGator,\n  removeSigner,\n  replaceSigner,\n  updateMultiSigParameters,\n  updateThreshold,\n};\n","export const MAX_NUMBER_OF_SIGNERS = 30;\n","import { read as getPendingOwner } from './methods/getPendingOwner';\nimport { read as getOwner } from './methods/getOwner';\n\nexport { getPendingOwner, getOwner };\n","import { Ownable2Step } from '@metamask-private/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport const read = async (client: Client, contractAddress: Address) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: Ownable2Step.abi,\n    functionName: 'pendingOwner',\n  });\n","import { Ownable2Step } from '@metamask-private/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport const read = async (client: Client, contractAddress: Address) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: Ownable2Step.abi,\n    functionName: 'owner',\n  });\n","import { execute as transferOwnership } from './methods/transferOwnership';\nimport { execute as renounceOwnership } from './methods/renounceOwnership';\nimport { execute as acceptOwnership } from './methods/acceptOwnership';\n\nexport { transferOwnership, renounceOwnership, acceptOwnership };\n","import { Address, Client, encodeFunctionData } from 'viem';\nimport { Ownable2Step } from '@metamask-private/delegation-abis';\nimport { simulateContract, writeContract } from 'viem/actions';\n\nimport { InitializedClient } from '../../types';\n\nexport const simulate = (\n  client: Client,\n  contractAddress: Address,\n  account: Address,\n) => {\n  return simulateContract(client, {\n    address: contractAddress,\n    abi: Ownable2Step.abi,\n    functionName: 'transferOwnership',\n    args: [account],\n  });\n};\n\nexport const execute = async (\n  client: InitializedClient,\n  contractAddress: Address,\n  account: Address,\n) => {\n  const { request } = await simulate(client, contractAddress, account);\n  return writeContract(client, request);\n};\n\nexport const encode = (account: Address) => {\n  return encodeFunctionData({\n    abi: Ownable2Step.abi,\n    functionName: 'transferOwnership',\n    args: [account],\n  });\n};\n","import { Address, Client, encodeFunctionData } from 'viem';\nimport { Ownable2Step } from '@metamask-private/delegation-abis';\nimport { simulateContract, writeContract } from 'viem/actions';\n\nimport { InitializedClient } from '../../types';\n\nexport const simulate = (client: Client, contractAddress: Address) => {\n  return simulateContract(client, {\n    address: contractAddress,\n    abi: Ownable2Step.abi,\n    functionName: 'renounceOwnership',\n  });\n};\n\nexport const execute = async (\n  client: InitializedClient,\n  contractAddress: Address,\n) => {\n  const { request } = await simulate(client, contractAddress);\n  return writeContract(client, request);\n};\n\nexport const encode = () => {\n  return encodeFunctionData({\n    abi: Ownable2Step.abi,\n    functionName: 'renounceOwnership',\n  });\n};\n","import { Address, Client, encodeFunctionData } from 'viem';\nimport { Ownable2Step } from '@metamask-private/delegation-abis';\nimport { simulateContract, writeContract } from 'viem/actions';\n\nimport { InitializedClient } from '../../types';\n\nexport const simulate = (client: Client, contractAddress: Address) => {\n  return simulateContract(client, {\n    address: contractAddress,\n    abi: Ownable2Step.abi,\n    functionName: 'acceptOwnership',\n  });\n};\n\nexport const execute = async (\n  client: InitializedClient,\n  contractAddress: Address,\n) => {\n  const { request } = await simulate(client, contractAddress);\n  return writeContract(client, request);\n};\n\nexport const encode = () => {\n  return encodeFunctionData({\n    abi: Ownable2Step.abi,\n    functionName: 'acceptOwnership',\n  });\n};\n","import { encode as transferOwnership } from './methods/transferOwnership';\nimport { encode as renounceOwnership } from './methods/renounceOwnership';\nimport { encode as acceptOwnership } from './methods/acceptOwnership';\n\nexport { transferOwnership, renounceOwnership, acceptOwnership };\n","import { simulate as transferOwnership } from './methods/transferOwnership';\nimport { simulate as renounceOwnership } from './methods/renounceOwnership';\nimport { simulate as acceptOwnership } from './methods/acceptOwnership';\n\nexport { transferOwnership, renounceOwnership, acceptOwnership };\n","import { read as isPaused } from './methods/isPaused';\n\nexport { isPaused };\n","import { Pausable } from '@metamask-private/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport const read = async (client: Client, contractAddress: Address) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: Pausable.abi,\n    functionName: 'paused',\n  });\n","import { execute as pause } from './methods/pause';\nimport { execute as unpause } from './methods/unpause';\n\nexport { pause, unpause };\n","import { Address, Client, encodeFunctionData } from 'viem';\nimport { simulateContract, writeContract } from 'viem/actions';\n\nimport { InitializedClient } from '../../types';\n\nconst PauseAbi = [\n  {\n    type: 'function',\n    name: 'pause',\n    inputs: [],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n];\n\nexport const simulate = (client: Client, contractAddress: Address) => {\n  return simulateContract(client, {\n    address: contractAddress,\n    abi: PauseAbi,\n    functionName: 'pause',\n  });\n};\n\nexport const execute = async (\n  client: InitializedClient,\n  contractAddress: Address,\n) => {\n  const { request } = await simulate(client, contractAddress);\n  return writeContract(client, request);\n};\n\nexport const encode = () => {\n  return encodeFunctionData({\n    abi: PauseAbi,\n    functionName: 'pause',\n  });\n};\n","import { Address, Client, encodeFunctionData } from 'viem';\nimport { simulateContract, writeContract } from 'viem/actions';\n\nimport { InitializedClient } from '../../types';\n\nconst UnpauseAbi = [\n  {\n    type: 'function',\n    name: 'unpause',\n    inputs: [],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n];\n\nexport const simulate = (client: Client, contractAddress: Address) => {\n  return simulateContract(client, {\n    address: contractAddress,\n    abi: UnpauseAbi,\n    functionName: 'unpause',\n  });\n};\n\nexport const execute = async (\n  client: InitializedClient,\n  contractAddress: Address,\n) => {\n  const { request } = await simulate(client, contractAddress);\n  return writeContract(client, request);\n};\n\nexport const encode = () => {\n  return encodeFunctionData({\n    abi: UnpauseAbi,\n    functionName: 'unpause',\n  });\n};\n","import { encode as pause } from './methods/pause';\nimport { encode as unpause } from './methods/unpause';\n\nexport { pause, unpause };\n","import { simulate as pause } from './methods/pause';\nimport { simulate as unpause } from './methods/unpause';\n\nexport { pause, unpause };\n","import { read as getCreate2Address } from './methods/getCreate2Address';\n\nexport { getCreate2Address };\n","import { Address, Client, Hex } from 'viem';\nimport { SimpleFactory } from '@metamask-private/delegation-abis';\nimport { readContract } from 'viem/actions';\n\nexport const read = (\n  client: Client,\n  factoryAddress: Address,\n  creationCode: Hex,\n  salt: Hex,\n) => {\n  return readContract(client, {\n    address: factoryAddress,\n    abi: SimpleFactory.abi,\n    functionName: 'computeAddress',\n    args: [creationCode, salt],\n  });\n};\n","import { simulate as create2Deploy } from './methods/create2Deploy';\n\nexport { create2Deploy };\n","import { execute as create2Deploy } from './methods/create2Deploy';\n\nexport { create2Deploy };\n","import * as DelegationManager from './DelegationManager';\nimport * as DeleGatorCore from './DeleGatorCore';\nimport * as EIP712 from './EIP712';\nimport * as EntryPoint from './EntryPoint';\nimport * as HybridDeleGator from './HybridDeleGator';\nimport * as MultiSigDeleGator from './MultiSigDeleGator';\nimport * as Ownable2Step from './Ownable2Step';\nimport * as Pausable from './Pausable';\nimport * as SimpleFactory from './SimpleFactory';\nimport * as utils from './utils';\n\n// NOTE: Unfortunately due to the nested namespaces we have to manually merge them here to ensure type generation works.\n\nconst encode: typeof HybridDeleGator.encode &\n  typeof MultiSigDeleGator.encode &\n  typeof DelegationManager.encode &\n  typeof DeleGatorCore.encode &\n  typeof Ownable2Step.encode &\n  typeof Pausable.encode &\n  typeof SimpleFactory.encode = {\n  ...HybridDeleGator.encode,\n  ...MultiSigDeleGator.encode,\n  ...DelegationManager.encode,\n  ...DeleGatorCore.encode,\n  ...Ownable2Step.encode,\n  ...Pausable.encode,\n  ...SimpleFactory.encode,\n};\n\nconst execute: typeof DelegationManager.execute &\n  typeof Ownable2Step.execute &\n  typeof Pausable.execute &\n  typeof SimpleFactory.execute = {\n  ...DelegationManager.execute,\n  ...Ownable2Step.execute,\n  ...Pausable.execute,\n  ...SimpleFactory.execute,\n};\n\nconst read: typeof HybridDeleGator.read &\n  typeof MultiSigDeleGator.read &\n  typeof DelegationManager.read &\n  typeof EntryPoint.read &\n  typeof EIP712.read &\n  typeof Ownable2Step.read &\n  typeof Pausable.read &\n  typeof SimpleFactory.read = {\n  ...HybridDeleGator.read,\n  ...MultiSigDeleGator.read,\n  ...DelegationManager.read,\n  ...EntryPoint.read,\n  ...EIP712.read,\n  ...Ownable2Step.read,\n  ...Pausable.read,\n  ...SimpleFactory.read,\n};\n\nconst simulate: typeof HybridDeleGator.simulate &\n  typeof MultiSigDeleGator.simulate &\n  typeof DelegationManager.simulate &\n  typeof DeleGatorCore.simulate &\n  typeof Ownable2Step.simulate &\n  typeof Pausable.simulate &\n  typeof SimpleFactory.simulate = {\n  ...HybridDeleGator.simulate,\n  ...MultiSigDeleGator.simulate,\n  ...DelegationManager.simulate,\n  ...DeleGatorCore.simulate,\n  ...Ownable2Step.simulate,\n  ...Pausable.simulate,\n  ...SimpleFactory.simulate,\n};\n\nconst constants: {\n  DelegationManager: typeof DelegationManager.constants;\n  HybridDeleGator: typeof HybridDeleGator.constants;\n  MultiSigDeleGator: typeof MultiSigDeleGator.constants;\n} = {\n  DelegationManager: DelegationManager.constants,\n  HybridDeleGator: HybridDeleGator.constants,\n  MultiSigDeleGator: MultiSigDeleGator.constants,\n};\n\n/**\n * Delegation Framework\n *\n * A suite of utility methods for interacting with the Delegation Framework contracts.\n */\nexport const DelegationFramework = {\n  encode,\n  execute,\n  read,\n  simulate,\n  constants,\n  utils,\n};\n"],"mappings":"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","names":["Implementation","HybridDeleGator","MultiSigDeleGator","signMessage","signTypedData","Implementation","encode","encodeFunctionData","HybridDeleGator","simulateContract","simulate","encode","encodeFunctionData","HybridDeleGator","simulateContract","simulate","encode","encodeFunctionData","HybridDeleGator","simulateContract","simulate","encode","encodeFunctionData","HybridDeleGator","simulateContract","simulate","encode","encode_exports","encode","encodeFunctionData","simulateContract","simulate","encode","encodeFunctionData","MultiSigDeleGator","simulateContract","simulate","encode","encodeFunctionData","MultiSigDeleGator","simulateContract","simulate","encode","encodeFunctionData","MultiSigDeleGator","simulateContract","simulate","encode","encodeFunctionData","MultiSigDeleGator","simulateContract","simulate","encode","encodeFunctionData","MultiSigDeleGator","simulateContract","simulate","encode","encodeFunctionData","MultiSigDeleGator","simulateContract","simulate","encode","encode_exports","encode","encodeFunctionData","simulateContract","simulate","encode","DeleGatorCore","readContract","DeleGatorCore","readContract","DeleGatorCore","readContract","DeleGatorCore","readContract","DeleGatorCore","readContract","Implementation","encode","encode_exports","encode","encodeFunctionData","DeleGatorCore","simulateContract","simulate","encode","encodeFunctionData","DeleGatorCore","simulateContract","simulate","encode","encodeFunctionData","DeleGatorCore","simulateContract","simulate","encode","encodeFunctionData","DeleGatorCore","simulateContract","simulate","encode","encodeFunctionData","DeleGatorCore","simulateContract","simulate","encode","encode","read","readContract","read","Implementation","params","HybridDeleGator","MultiSigDeleGator","read","encodeCalls","encode_exports","encode","encodeFunctionData","simulateContract","writeContract","simulate","execute","encode","encodeFunctionData","simulateContract","writeContract","DelegationManager","simulate","execute","encode","encodeFunctionData","DelegationManager","simulateContract","writeContract","simulate","execute","encode","execute","read_exports","read","DelegationManager","readContract","read","DelegationManager","readContract","read","simulate","simulate_exports","simulate","read_exports","read","readContract","read","readContract","read","readContract","read","read_exports","read","HybridDeleGator","readContract","read","HybridDeleGator","readContract","read","HybridDeleGator","readContract","read","simulate_exports","simulate","constants_exports","ANY_DELEGATE","DOMAIN_VERSION","NAME","ROOT_AUTHORITY","VERSION","NAME","VERSION","DOMAIN_VERSION","ROOT_AUTHORITY","ANY_DELEGATE","read_exports","read","MultiSigDeleGator","readContract","read","MultiSigDeleGator","readContract","read","MultiSigDeleGator","readContract","read","MultiSigDeleGator","readContract","read","MultiSigDeleGator","readContract","read","simulate_exports","simulate","constants_exports","read_exports","read","readContract","read","Ownable2Step","readContract","read","execute_exports","execute","encodeFunctionData","Ownable2Step","simulateContract","writeContract","simulate","execute","encode","encodeFunctionData","Ownable2Step","simulateContract","writeContract","simulate","execute","encode","encodeFunctionData","Ownable2Step","simulateContract","writeContract","simulate","execute","encode","encode_exports","encode","simulate_exports","simulate","read_exports","read","readContract","read","execute_exports","execute","encodeFunctionData","simulateContract","writeContract","simulate","execute","encode","encodeFunctionData","simulateContract","writeContract","simulate","execute","encode","encode_exports","encode","simulate_exports","simulate","read_exports","read","SimpleFactory","readContract","read","simulate_exports","simulate","execute_exports","encode","encode_exports","execute","execute_exports","read","read_exports","simulate","simulate_exports","constants_exports"]}